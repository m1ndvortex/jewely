# Generated by Django 4.2.11 on 2025-10-21 20:42

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tenant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the tenant",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "company_name",
                    models.CharField(help_text="Name of the jewelry shop business", max_length=255),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly identifier for the tenant",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("SUSPENDED", "Suspended"),
                            ("PENDING_DELETION", "Pending Deletion"),
                        ],
                        default="ACTIVE",
                        help_text="Current operational status of the tenant",
                        max_length=20,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Timestamp when the tenant was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Timestamp when the tenant was last updated"
                    ),
                ),
            ],
            options={
                "verbose_name": "Tenant",
                "verbose_name_plural": "Tenants",
                "db_table": "tenants",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["status"], name="tenant_status_idx"),
                    models.Index(fields=["slug"], name="tenant_slug_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Branch",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the branch",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(help_text="Branch name", max_length=255)),
                ("address", models.TextField(blank=True, help_text="Branch address")),
                (
                    "phone",
                    models.CharField(blank=True, help_text="Branch phone number", max_length=20),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether the branch is active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this branch",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="branches",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Branch",
                "verbose_name_plural": "Branches",
                "db_table": "branches",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("PLATFORM_ADMIN", "Platform Administrator"),
                            ("TENANT_OWNER", "Shop Owner"),
                            ("TENANT_MANAGER", "Shop Manager"),
                            ("TENANT_EMPLOYEE", "Shop Employee"),
                        ],
                        default="TENANT_EMPLOYEE",
                        help_text="User's role in the system",
                        max_length=50,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("fa", "Persian")],
                        default="en",
                        help_text="User's preferred language",
                        max_length=10,
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        choices=[("light", "Light"), ("dark", "Dark")],
                        default="light",
                        help_text="User's preferred theme",
                        max_length=10,
                    ),
                ),
                (
                    "phone",
                    models.CharField(blank=True, help_text="User's phone number", max_length=20),
                ),
                (
                    "is_mfa_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether multi-factor authentication is enabled for this user",
                    ),
                ),
                (
                    "branch",
                    models.ForeignKey(
                        blank=True,
                        help_text="Branch that this user is assigned to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="core.branch",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        help_text="Tenant that this user belongs to (null for platform admins)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="core.tenant",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users",
                "ordering": ["username"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name="branch",
            index=models.Index(fields=["tenant", "is_active"], name="branch_tenant_active_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="branch",
            unique_together={("tenant", "name")},
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["tenant", "role"], name="user_tenant_role_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["tenant", "branch"], name="user_tenant_branch_idx"),
        ),
    ]
