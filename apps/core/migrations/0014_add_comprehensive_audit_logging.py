# Generated by Django 4.2.11 on 2025-10-27 09:29

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("core", "0013_add_alert_models"),
    ]

    operations = [
        migrations.CreateModel(
            name="LoginAttempt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_index=True, help_text="Username that was attempted", max_length=150
                    ),
                ),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("SUCCESS", "Successful"),
                            ("FAILED_PASSWORD", "Failed - Invalid Password"),
                            ("FAILED_USER_NOT_FOUND", "Failed - User Not Found"),
                            ("FAILED_ACCOUNT_DISABLED", "Failed - Account Disabled"),
                            ("FAILED_MFA", "Failed - MFA Verification"),
                            ("FAILED_RATE_LIMIT", "Failed - Rate Limit Exceeded"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        db_index=True, help_text="IP address of the login attempt"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, help_text="User agent string")),
                (
                    "country",
                    models.CharField(
                        blank=True, help_text="Country of the IP address", max_length=100
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, help_text="City of the IP address", max_length=100
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="login_attempts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Login Attempt",
                "verbose_name_plural": "Login Attempts",
                "db_table": "login_attempts",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(fields=["username", "-timestamp"], name="login_username_time_idx"),
                    models.Index(fields=["ip_address", "-timestamp"], name="login_ip_time_idx"),
                    models.Index(fields=["result", "-timestamp"], name="login_result_time_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="DataChangeLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "change_type",
                    models.CharField(
                        choices=[
                            ("CREATE", "Created"),
                            ("UPDATE", "Updated"),
                            ("DELETE", "Deleted"),
                        ],
                        db_index=True,
                        max_length=10,
                    ),
                ),
                (
                    "object_id",
                    models.CharField(help_text="ID of the modified object", max_length=255),
                ),
                (
                    "object_repr",
                    models.CharField(
                        help_text="String representation of the object", max_length=500
                    ),
                ),
                (
                    "field_changes",
                    models.JSONField(
                        help_text="Dictionary of field changes: {field_name: {old: value, new: value}}"
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="Type of the modified object",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="data_changes",
                        to="core.tenant",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="data_changes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Data Change Log",
                "verbose_name_plural": "Data Change Logs",
                "db_table": "data_change_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id", "-timestamp"],
                        name="data_change_object_idx",
                    ),
                    models.Index(fields=["tenant", "-timestamp"], name="data_change_tenant_idx"),
                    models.Index(fields=["user", "-timestamp"], name="data_change_user_idx"),
                    models.Index(fields=["change_type", "-timestamp"], name="data_change_type_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the audit log entry",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Administrative Action"),
                            ("USER", "User Activity"),
                            ("DATA", "Data Modification"),
                            ("API", "API Request"),
                            ("SECURITY", "Security Event"),
                            ("SYSTEM", "System Event"),
                        ],
                        db_index=True,
                        help_text="Category of the action",
                        max_length=20,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("TENANT_CREATE", "Tenant Created"),
                            ("TENANT_UPDATE", "Tenant Updated"),
                            ("TENANT_DELETE", "Tenant Deleted"),
                            ("TENANT_SUSPEND", "Tenant Suspended"),
                            ("TENANT_ACTIVATE", "Tenant Activated"),
                            ("USER_CREATE", "User Created"),
                            ("USER_UPDATE", "User Updated"),
                            ("USER_DELETE", "User Deleted"),
                            ("SUBSCRIPTION_CREATE", "Subscription Created"),
                            ("SUBSCRIPTION_UPDATE", "Subscription Updated"),
                            ("SUBSCRIPTION_CANCEL", "Subscription Cancelled"),
                            ("IMPERSONATION_START", "Impersonation Started"),
                            ("IMPERSONATION_END", "Impersonation Ended"),
                            ("LOGIN_SUCCESS", "Login Successful"),
                            ("LOGIN_FAILED", "Login Failed"),
                            ("LOGOUT", "Logout"),
                            ("PASSWORD_CHANGE", "Password Changed"),
                            ("PASSWORD_RESET_REQUEST", "Password Reset Requested"),
                            ("PASSWORD_RESET_COMPLETE", "Password Reset Completed"),
                            ("MFA_ENABLE", "MFA Enabled"),
                            ("MFA_DISABLE", "MFA Disabled"),
                            ("MFA_VERIFY_SUCCESS", "MFA Verification Successful"),
                            ("MFA_VERIFY_FAILED", "MFA Verification Failed"),
                            ("CREATE", "Record Created"),
                            ("UPDATE", "Record Updated"),
                            ("DELETE", "Record Deleted"),
                            ("BULK_CREATE", "Bulk Records Created"),
                            ("BULK_UPDATE", "Bulk Records Updated"),
                            ("BULK_DELETE", "Bulk Records Deleted"),
                            ("API_GET", "API GET Request"),
                            ("API_POST", "API POST Request"),
                            ("API_PUT", "API PUT Request"),
                            ("API_PATCH", "API PATCH Request"),
                            ("API_DELETE", "API DELETE Request"),
                            ("SECURITY_BREACH_ATTEMPT", "Security Breach Attempt"),
                            ("SECURITY_SUSPICIOUS_ACTIVITY", "Suspicious Activity"),
                            ("SECURITY_RATE_LIMIT_EXCEEDED", "Rate Limit Exceeded"),
                            ("SECURITY_UNAUTHORIZED_ACCESS", "Unauthorized Access Attempt"),
                        ],
                        db_index=True,
                        help_text="Specific action performed",
                        max_length=50,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("CRITICAL", "Critical"),
                        ],
                        db_index=True,
                        default="INFO",
                        help_text="Severity level of the action",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Human-readable description of the action"),
                ),
                (
                    "object_id",
                    models.CharField(
                        blank=True, help_text="ID of the affected object", max_length=255, null=True
                    ),
                ),
                (
                    "old_values",
                    models.JSONField(
                        blank=True,
                        help_text="Previous values before the change (JSON format)",
                        null=True,
                    ),
                ),
                (
                    "new_values",
                    models.JSONField(
                        blank=True, help_text="New values after the change (JSON format)", null=True
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, db_index=True, help_text="IP address of the user", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User agent string of the browser/client"
                    ),
                ),
                (
                    "request_method",
                    models.CharField(
                        blank=True,
                        help_text="HTTP request method (GET, POST, PUT, DELETE, etc.)",
                        max_length=10,
                    ),
                ),
                (
                    "request_path",
                    models.CharField(
                        blank=True, db_index=True, help_text="Request path/URL", max_length=500
                    ),
                ),
                (
                    "request_params",
                    models.JSONField(
                        blank=True,
                        help_text="Request parameters (query string and POST data)",
                        null=True,
                    ),
                ),
                (
                    "response_status",
                    models.IntegerField(
                        blank=True, help_text="HTTP response status code", null=True
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, help_text="Additional metadata (JSON format)", null=True
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, help_text="When the action occurred"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Type of the affected object",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        help_text="Tenant associated with this action (null for platform actions)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to="core.tenant",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who performed the action",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs_performed",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit Log",
                "verbose_name_plural": "Audit Logs",
                "db_table": "audit_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(fields=["tenant", "-timestamp"], name="auditlog_tenant_time_idx"),
                    models.Index(fields=["user", "-timestamp"], name="auditlog_user_time_idx"),
                    models.Index(
                        fields=["category", "-timestamp"], name="auditlog_category_time_idx"
                    ),
                    models.Index(fields=["action", "-timestamp"], name="auditlog_action_time_idx"),
                    models.Index(
                        fields=["severity", "-timestamp"], name="auditlog_severity_time_idx"
                    ),
                    models.Index(fields=["ip_address", "-timestamp"], name="auditlog_ip_time_idx"),
                    models.Index(
                        fields=["request_path", "-timestamp"], name="auditlog_path_time_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="APIRequestLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        db_index=True,
                        help_text="HTTP method (GET, POST, PUT, DELETE, etc.)",
                        max_length=10,
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        db_index=True, help_text="Request path/endpoint", max_length=500
                    ),
                ),
                (
                    "query_params",
                    models.JSONField(blank=True, help_text="Query string parameters", null=True),
                ),
                (
                    "request_body",
                    models.JSONField(
                        blank=True, help_text="Request body (for POST/PUT/PATCH)", null=True
                    ),
                ),
                (
                    "status_code",
                    models.IntegerField(db_index=True, help_text="HTTP response status code"),
                ),
                (
                    "response_time_ms",
                    models.IntegerField(help_text="Response time in milliseconds"),
                ),
                (
                    "response_size_bytes",
                    models.IntegerField(blank=True, help_text="Response size in bytes", null=True),
                ),
                ("ip_address", models.GenericIPAddressField(db_index=True)),
                ("user_agent", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="api_requests",
                        to="core.tenant",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="api_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "API Request Log",
                "verbose_name_plural": "API Request Logs",
                "db_table": "api_request_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(fields=["tenant", "-timestamp"], name="api_req_tenant_time_idx"),
                    models.Index(fields=["user", "-timestamp"], name="api_req_user_time_idx"),
                    models.Index(fields=["method", "-timestamp"], name="api_req_method_time_idx"),
                    models.Index(fields=["path", "-timestamp"], name="api_req_path_time_idx"),
                    models.Index(
                        fields=["status_code", "-timestamp"], name="api_req_status_time_idx"
                    ),
                ],
            },
        ),
    ]
