# Generated by Django 4.2.11 on 2025-10-29 09:27

import uuid

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0024_add_performance_tracking_fields"),
    ]

    operations = [
        migrations.CreateModel(
            name="DocumentationPage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the documentation page",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the documentation page", max_length=255),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly identifier for the page",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Full content of the documentation page (supports Markdown)"
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True, help_text="Brief summary or excerpt of the page content"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("ARCHITECTURE", "Architecture & Components"),
                            ("ADMIN_GUIDE", "Admin Guide"),
                            ("TROUBLESHOOTING", "Troubleshooting"),
                            ("API_DOCUMENTATION", "API Documentation"),
                            ("FAQ", "Frequently Asked Questions"),
                            ("DEVELOPER_GUIDE", "Developer Guide"),
                            ("USER_GUIDE", "User Guide"),
                        ],
                        help_text="Category of the documentation",
                        max_length=50,
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of tags for categorization and search",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0",
                        help_text="Version number of the documentation",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PUBLISHED", "Published"),
                            ("ARCHIVED", "Archived"),
                        ],
                        default="DRAFT",
                        help_text="Publication status of the page",
                        max_length=20,
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Display order within the same category or parent"
                    ),
                ),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(
                        blank=True,
                        help_text="Full-text search index for title and content",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the page was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the page was last updated"),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True, help_text="When the page was published", null=True
                    ),
                ),
                (
                    "view_count",
                    models.IntegerField(
                        default=0, help_text="Number of times this page has been viewed"
                    ),
                ),
                (
                    "last_viewed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the page was last viewed", null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created the page",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_documentation_pages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent page for hierarchical organization",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.documentationpage",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        help_text="User who last updated the page",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_documentation_pages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "documentation_pages",
                "ordering": ["category", "order", "title"],
            },
        ),
        migrations.CreateModel(
            name="Runbook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the runbook",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Title of the runbook", max_length=255)),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly identifier for the runbook",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Brief description of what this runbook covers"),
                ),
                (
                    "runbook_type",
                    models.CharField(
                        choices=[
                            ("INCIDENT_RESPONSE", "Incident Response"),
                            ("MAINTENANCE", "Maintenance"),
                            ("DISASTER_RECOVERY", "Disaster Recovery"),
                            ("DEPLOYMENT", "Deployment"),
                            ("TROUBLESHOOTING", "Troubleshooting"),
                            ("BACKUP_RESTORE", "Backup & Restore"),
                        ],
                        help_text="Type of operational runbook",
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("CRITICAL", "Critical"),
                            ("HIGH", "High"),
                            ("MEDIUM", "Medium"),
                            ("LOW", "Low"),
                        ],
                        default="MEDIUM",
                        help_text="Priority level of the runbook",
                        max_length=20,
                    ),
                ),
                (
                    "prerequisites",
                    models.TextField(
                        blank=True,
                        help_text="Prerequisites or requirements before executing the runbook",
                    ),
                ),
                (
                    "steps",
                    models.JSONField(
                        default=list,
                        help_text="List of step-by-step procedures (each step is a dict with title, description, commands)",
                    ),
                ),
                (
                    "expected_duration",
                    models.DurationField(
                        blank=True,
                        help_text="Expected time to complete the runbook procedures",
                        null=True,
                    ),
                ),
                (
                    "rto",
                    models.DurationField(
                        blank=True,
                        help_text="Recovery Time Objective - maximum acceptable downtime",
                        null=True,
                    ),
                ),
                (
                    "rpo",
                    models.DurationField(
                        blank=True,
                        help_text="Recovery Point Objective - maximum acceptable data loss",
                        null=True,
                    ),
                ),
                (
                    "verification_steps",
                    models.JSONField(
                        blank=True, default=list, help_text="Steps to verify successful execution"
                    ),
                ),
                (
                    "rollback_steps",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Steps to rollback if something goes wrong",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of tags for categorization and search",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0", help_text="Version number of the runbook", max_length=50
                    ),
                ),
                (
                    "changelog",
                    models.TextField(blank=True, help_text="Change history for this runbook"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("ACTIVE", "Active"),
                            ("DEPRECATED", "Deprecated"),
                        ],
                        default="DRAFT",
                        help_text="Status of the runbook",
                        max_length=20,
                    ),
                ),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(
                        blank=True,
                        help_text="Full-text search index for title, description, and steps",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the runbook was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When the runbook was last updated"
                    ),
                ),
                (
                    "last_executed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the runbook was last executed", null=True
                    ),
                ),
                (
                    "execution_count",
                    models.IntegerField(
                        default=0, help_text="Number of times this runbook has been executed"
                    ),
                ),
                (
                    "success_count",
                    models.IntegerField(default=0, help_text="Number of successful executions"),
                ),
                (
                    "failure_count",
                    models.IntegerField(default=0, help_text="Number of failed executions"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created the runbook",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_runbooks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_documentation",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Related documentation pages",
                        related_name="related_runbooks",
                        to="core.documentationpage",
                    ),
                ),
                (
                    "related_runbooks",
                    models.ManyToManyField(
                        blank=True, help_text="Related runbooks", to="core.runbook"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        help_text="User who last updated the runbook",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_runbooks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "runbooks",
                "ordering": ["-priority", "runbook_type", "title"],
            },
        ),
        migrations.CreateModel(
            name="AdminNote",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the note",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Title of the note", max_length=255)),
                ("content", models.TextField(help_text="Full content of the note")),
                (
                    "note_type",
                    models.CharField(
                        choices=[
                            ("TIP", "Tip"),
                            ("WARNING", "Warning"),
                            ("BEST_PRACTICE", "Best Practice"),
                            ("LESSON_LEARNED", "Lesson Learned"),
                        ],
                        default="TIP",
                        help_text="Type of note",
                        max_length=50,
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="List of tags for categorization"
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(
                        default=False, help_text="Whether this note is pinned to the top"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the note was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the note was last updated"),
                ),
                (
                    "helpful_count",
                    models.IntegerField(
                        default=0, help_text="Number of admins who found this note helpful"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Admin who created the note",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_admin_notes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "documentation_page",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related documentation page",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_notes",
                        to="core.documentationpage",
                    ),
                ),
                (
                    "runbook",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related runbook",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_notes",
                        to="core.runbook",
                    ),
                ),
            ],
            options={
                "db_table": "admin_notes",
                "ordering": ["-is_pinned", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RunbookExecution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the execution",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "runbook_version",
                    models.CharField(
                        help_text="Version of the runbook at time of execution", max_length=50
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the execution started"),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the execution completed", null=True
                    ),
                ),
                (
                    "duration",
                    models.DurationField(
                        blank=True, help_text="Total duration of the execution", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="IN_PROGRESS",
                        help_text="Current status of the execution",
                        max_length=20,
                    ),
                ),
                (
                    "steps_completed",
                    models.JSONField(
                        default=list, help_text="List of step indices that have been completed"
                    ),
                ),
                (
                    "current_step",
                    models.IntegerField(
                        blank=True, help_text="Index of the current step being executed", null=True
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes and observations during execution"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Error message if execution failed"),
                ),
                (
                    "verification_passed",
                    models.BooleanField(
                        blank=True, help_text="Whether verification steps passed", null=True
                    ),
                ),
                (
                    "rollback_performed",
                    models.BooleanField(default=False, help_text="Whether rollback was performed"),
                ),
                (
                    "executed_by",
                    models.ForeignKey(
                        help_text="User who executed the runbook",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="runbook_executions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "runbook",
                    models.ForeignKey(
                        help_text="The runbook that was executed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="core.runbook",
                    ),
                ),
            ],
            options={
                "db_table": "runbook_executions",
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["runbook", "-started_at"], name="runbook_exe_runbook_0f3887_idx"
                    ),
                    models.Index(
                        fields=["executed_by", "-started_at"], name="runbook_exe_execute_1bb2ef_idx"
                    ),
                    models.Index(
                        fields=["status", "-started_at"], name="runbook_exe_status_d51390_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="runbook",
            index=models.Index(
                fields=["runbook_type", "status"], name="runbooks_runbook_6b6d13_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="runbook",
            index=models.Index(fields=["priority", "status"], name="runbooks_priorit_febf28_idx"),
        ),
        migrations.AddIndex(
            model_name="runbook",
            index=models.Index(fields=["status", "-updated_at"], name="runbooks_status_1ea1c3_idx"),
        ),
        migrations.AddIndex(
            model_name="runbook",
            index=models.Index(fields=["slug"], name="runbooks_slug_007d6e_idx"),
        ),
        migrations.AddIndex(
            model_name="runbook",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="runbook_search_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documentationpage",
            index=models.Index(
                fields=["category", "status"], name="documentati_categor_5cbf82_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documentationpage",
            index=models.Index(
                fields=["status", "-updated_at"], name="documentati_status_5149c3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documentationpage",
            index=models.Index(fields=["slug"], name="documentati_slug_73643f_idx"),
        ),
        migrations.AddIndex(
            model_name="documentationpage",
            index=models.Index(fields=["parent", "order"], name="documentati_parent__9820f4_idx"),
        ),
        migrations.AddIndex(
            model_name="documentationpage",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="doc_search_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="adminnote",
            index=models.Index(
                fields=["documentation_page", "-created_at"], name="admin_notes_documen_47f986_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="adminnote",
            index=models.Index(
                fields=["runbook", "-created_at"], name="admin_notes_runbook_852f71_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="adminnote",
            index=models.Index(
                fields=["note_type", "-created_at"], name="admin_notes_note_ty_a3b4bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="adminnote",
            index=models.Index(
                fields=["-is_pinned", "-created_at"], name="admin_notes_is_pinn_9252c4_idx"
            ),
        ),
    ]
