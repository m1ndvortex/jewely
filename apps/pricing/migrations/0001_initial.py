# Generated by Django 4.2.11 on 2025-10-23 21:32

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0008_branch_manager_branch_opening_hours"),
    ]

    operations = [
        migrations.CreateModel(
            name="GoldRate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the gold rate record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "rate_per_gram",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Gold rate per gram in local currency",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "rate_per_tola",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Gold rate per tola (11.664 grams) in local currency",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "rate_per_ounce",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Gold rate per troy ounce (31.1035 grams) in local currency",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "market",
                    models.CharField(
                        choices=[
                            ("INTERNATIONAL", "International"),
                            ("LOCAL", "Local Market"),
                            ("LONDON", "London Gold Market"),
                            ("NEW_YORK", "New York Gold Market"),
                            ("DUBAI", "Dubai Gold Market"),
                            ("MUMBAI", "Mumbai Gold Market"),
                        ],
                        default="INTERNATIONAL",
                        help_text="Market from which this rate was fetched",
                        max_length=20,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD",
                        help_text="Currency code (ISO 4217) for the rates",
                        max_length=3,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="Source API or provider (e.g., GoldAPI, Metals-API)",
                        max_length=100,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this rate is currently active/latest"
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this rate was recorded"
                    ),
                ),
                (
                    "fetched_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this rate was fetched from external API",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Gold Rate",
                "verbose_name_plural": "Gold Rates",
                "db_table": "pricing_gold_rates",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["market", "is_active", "-timestamp"],
                        name="gold_rate_market_active_idx",
                    ),
                    models.Index(
                        fields=["currency", "is_active", "-timestamp"],
                        name="gold_rate_currency_active_idx",
                    ),
                    models.Index(fields=["-timestamp"], name="gold_rate_timestamp_idx"),
                    models.Index(
                        fields=["market", "currency", "-timestamp"], name="gold_rate_history_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PricingRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the pricing rule",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "karat",
                    models.IntegerField(
                        help_text="Gold karat this rule applies to (1-24)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(24),
                        ],
                    ),
                ),
                (
                    "product_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("RING", "Ring"),
                            ("NECKLACE", "Necklace"),
                            ("BRACELET", "Bracelet"),
                            ("EARRING", "Earring"),
                            ("PENDANT", "Pendant"),
                            ("CHAIN", "Chain"),
                            ("BANGLE", "Bangle"),
                            ("OTHER", "Other"),
                        ],
                        help_text="Product type this rule applies to (optional, null means all types)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "craftsmanship_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HANDMADE", "Handmade"),
                            ("MACHINE_MADE", "Machine Made"),
                            ("SEMI_HANDMADE", "Semi-Handmade"),
                        ],
                        help_text="Craftsmanship level this rule applies to (optional, null means all levels)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "customer_tier",
                    models.CharField(
                        choices=[
                            ("WHOLESALE", "Wholesale"),
                            ("RETAIL", "Retail"),
                            ("VIP", "VIP Customer"),
                            ("EMPLOYEE", "Employee Discount"),
                        ],
                        default="RETAIL",
                        help_text="Customer tier this rule applies to",
                        max_length=20,
                    ),
                ),
                (
                    "markup_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Markup percentage over gold rate (e.g., 25.50 for 25.5%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("999.99")),
                        ],
                    ),
                ),
                (
                    "fixed_markup_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Fixed amount to add to the calculated price",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "minimum_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Minimum price regardless of calculation (optional)",
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "making_charge_per_gram",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Making charge per gram of gold",
                        max_digits=8,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "stone_charge_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Additional charge percentage for stones/gems",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this pricing rule", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description of when this rule applies"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this rule is currently active"
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0,
                        help_text="Rule priority (higher numbers take precedence in case of conflicts)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When this rule was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this rule was last updated"
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this pricing rule",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricing_rules",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pricing Rule",
                "verbose_name_plural": "Pricing Rules",
                "db_table": "pricing_rules",
                "ordering": ["-priority", "karat", "customer_tier"],
                "indexes": [
                    models.Index(
                        fields=["tenant", "is_active", "-priority"],
                        name="pricing_rule_tenant_active_idx",
                    ),
                    models.Index(
                        fields=["tenant", "karat", "customer_tier"], name="pricing_rule_lookup_idx"
                    ),
                    models.Index(
                        fields=["tenant", "product_type", "is_active"],
                        name="pricing_rule_product_idx",
                    ),
                    models.Index(
                        fields=["tenant", "craftsmanship_level", "is_active"],
                        name="pricing_rule_craft_idx",
                    ),
                ],
                "unique_together": {
                    ("tenant", "karat", "product_type", "craftsmanship_level", "customer_tier")
                },
            },
        ),
        migrations.CreateModel(
            name="PriceAlert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the price alert",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Descriptive name for this alert", max_length=100),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("THRESHOLD_ABOVE", "Rate Above Threshold"),
                            ("THRESHOLD_BELOW", "Rate Below Threshold"),
                            ("PERCENTAGE_CHANGE", "Percentage Change"),
                        ],
                        help_text="Type of alert condition",
                        max_length=20,
                    ),
                ),
                (
                    "market",
                    models.CharField(
                        choices=[
                            ("INTERNATIONAL", "International"),
                            ("LOCAL", "Local Market"),
                            ("LONDON", "London Gold Market"),
                            ("NEW_YORK", "New York Gold Market"),
                            ("DUBAI", "Dubai Gold Market"),
                            ("MUMBAI", "Mumbai Gold Market"),
                        ],
                        default="INTERNATIONAL",
                        help_text="Market to monitor for this alert",
                        max_length=20,
                    ),
                ),
                (
                    "threshold_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Rate threshold for THRESHOLD_ABOVE/BELOW alerts",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "percentage_threshold",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage change threshold for PERCENTAGE_CHANGE alerts",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this alert is currently active"
                    ),
                ),
                (
                    "notify_email",
                    models.BooleanField(default=True, help_text="Send email notifications"),
                ),
                (
                    "notify_sms",
                    models.BooleanField(default=False, help_text="Send SMS notifications"),
                ),
                (
                    "notify_in_app",
                    models.BooleanField(default=True, help_text="Send in-app notifications"),
                ),
                (
                    "last_triggered_at",
                    models.DateTimeField(
                        blank=True, help_text="When this alert was last triggered", null=True
                    ),
                ),
                (
                    "trigger_count",
                    models.IntegerField(
                        default=0, help_text="Number of times this alert has been triggered"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this alert was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this alert was last updated"
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this alert",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_alerts",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Price Alert",
                "verbose_name_plural": "Price Alerts",
                "db_table": "pricing_alerts",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["tenant", "is_active"], name="price_alert_tenant_active_idx"
                    ),
                    models.Index(
                        fields=["market", "is_active"], name="price_alert_market_active_idx"
                    ),
                    models.Index(
                        fields=["alert_type", "is_active"], name="price_alert_type_active_idx"
                    ),
                ],
            },
        ),
    ]
