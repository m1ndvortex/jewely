# Generated by Django 4.2.11 on 2025-10-25 09:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0008_branch_manager_branch_opening_hours"),
    ]

    operations = [
        migrations.CreateModel(
            name="TenantSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "business_name",
                    models.CharField(
                        blank=True,
                        help_text="Official business name (can differ from tenant company_name)",
                        max_length=255,
                    ),
                ),
                (
                    "business_registration_number",
                    models.CharField(
                        blank=True,
                        help_text="Business registration or license number",
                        max_length=100,
                    ),
                ),
                (
                    "tax_identification_number",
                    models.CharField(blank=True, help_text="Tax ID or VAT number", max_length=100),
                ),
                ("address_line_1", models.CharField(blank=True, max_length=255)),
                ("address_line_2", models.CharField(blank=True, max_length=255)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("state_province", models.CharField(blank=True, max_length=100)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("fax", models.CharField(blank=True, max_length=20)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("website", models.URLField(blank=True)),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Business logo for invoices and receipts",
                        null=True,
                        upload_to="tenant_logos/",
                    ),
                ),
                (
                    "primary_color",
                    models.CharField(
                        default="#1f2937",
                        help_text="Primary brand color (hex format, e.g., #1f2937)",
                        max_length=7,
                    ),
                ),
                (
                    "secondary_color",
                    models.CharField(
                        default="#6b7280",
                        help_text="Secondary brand color (hex format)",
                        max_length=7,
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC",
                        help_text="Business timezone (e.g., America/New_York, Asia/Tehran)",
                        max_length=50,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("USD", "US Dollar ($)"),
                            ("EUR", "Euro (€)"),
                            ("GBP", "British Pound (£)"),
                            ("IRR", "Iranian Rial (﷼)"),
                            ("AED", "UAE Dirham (د.إ)"),
                        ],
                        default="USD",
                        help_text="Default currency for transactions",
                        max_length=3,
                    ),
                ),
                (
                    "date_format",
                    models.CharField(
                        choices=[
                            ("MM/DD/YYYY", "MM/DD/YYYY (US)"),
                            ("DD/MM/YYYY", "DD/MM/YYYY (European)"),
                            ("YYYY-MM-DD", "YYYY-MM-DD (ISO)"),
                            ("YYYY/MM/DD", "YYYY/MM/DD (Persian)"),
                        ],
                        default="MM/DD/YYYY",
                        help_text="Preferred date format for display",
                        max_length=20,
                    ),
                ),
                (
                    "business_hours",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Weekly business hours in format: {'monday': {'open': '09:00', 'close': '18:00', 'closed': false}, ...}",
                    ),
                ),
                (
                    "holidays",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of holiday dates and names: [{'date': '2024-01-01', 'name': 'New Year'}, ...]",
                    ),
                ),
                (
                    "default_tax_rate",
                    models.DecimalField(
                        decimal_places=4,
                        default=0.0,
                        help_text="Default tax rate as decimal (e.g., 0.0825 for 8.25%)",
                        max_digits=5,
                    ),
                ),
                (
                    "tax_inclusive_pricing",
                    models.BooleanField(
                        default=False, help_text="Whether prices include tax by default"
                    ),
                ),
                (
                    "require_mfa_for_managers",
                    models.BooleanField(
                        default=False, help_text="Require MFA for tenant managers and owners"
                    ),
                ),
                (
                    "password_expiry_days",
                    models.IntegerField(
                        default=0, help_text="Password expiry in days (0 = no expiry)"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.OneToOneField(
                        help_text="Tenant that owns these settings",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tenant Settings",
                "verbose_name_plural": "Tenant Settings",
                "db_table": "tenant_settings",
            },
        ),
        migrations.CreateModel(
            name="InvoiceSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "invoice_template",
                    models.CharField(
                        choices=[
                            ("standard", "Standard Template"),
                            ("minimal", "Minimal Template"),
                            ("detailed", "Detailed Template"),
                            ("custom", "Custom Template"),
                        ],
                        default="standard",
                        help_text="Invoice template to use",
                        max_length=20,
                    ),
                ),
                (
                    "receipt_template",
                    models.CharField(
                        choices=[
                            ("standard", "Standard Template"),
                            ("minimal", "Minimal Template"),
                            ("detailed", "Detailed Template"),
                            ("custom", "Custom Template"),
                        ],
                        default="standard",
                        help_text="Receipt template to use",
                        max_length=20,
                    ),
                ),
                (
                    "invoice_numbering_scheme",
                    models.CharField(
                        choices=[
                            ("sequential", "Sequential (1, 2, 3, ...)"),
                            ("yearly", "Yearly (2024-001, 2024-002, ...)"),
                            ("monthly", "Monthly (2024-01-001, 2024-01-002, ...)"),
                            ("custom", "Custom Format"),
                        ],
                        default="sequential",
                        help_text="Invoice numbering scheme",
                        max_length=20,
                    ),
                ),
                (
                    "invoice_number_prefix",
                    models.CharField(
                        default="INV",
                        help_text="Prefix for invoice numbers (e.g., INV, BILL)",
                        max_length=10,
                    ),
                ),
                (
                    "invoice_number_format",
                    models.CharField(
                        default="{prefix}-{number:06d}",
                        help_text="Custom format string for invoice numbers",
                        max_length=50,
                    ),
                ),
                (
                    "next_invoice_number",
                    models.IntegerField(default=1, help_text="Next invoice number to use"),
                ),
                (
                    "receipt_numbering_scheme",
                    models.CharField(
                        choices=[
                            ("sequential", "Sequential (1, 2, 3, ...)"),
                            ("yearly", "Yearly (2024-001, 2024-002, ...)"),
                            ("monthly", "Monthly (2024-01-001, 2024-01-002, ...)"),
                            ("custom", "Custom Format"),
                        ],
                        default="sequential",
                        help_text="Receipt numbering scheme",
                        max_length=20,
                    ),
                ),
                (
                    "receipt_number_prefix",
                    models.CharField(
                        default="RCP", help_text="Prefix for receipt numbers", max_length=10
                    ),
                ),
                (
                    "receipt_number_format",
                    models.CharField(
                        default="{prefix}-{number:06d}",
                        help_text="Custom format string for receipt numbers",
                        max_length=50,
                    ),
                ),
                (
                    "next_receipt_number",
                    models.IntegerField(default=1, help_text="Next receipt number to use"),
                ),
                (
                    "show_item_codes",
                    models.BooleanField(default=True, help_text="Show item SKU/codes on invoices"),
                ),
                (
                    "show_item_descriptions",
                    models.BooleanField(default=True, help_text="Show detailed item descriptions"),
                ),
                (
                    "show_item_weights",
                    models.BooleanField(
                        default=True, help_text="Show item weights (important for jewelry)"
                    ),
                ),
                (
                    "show_karat_purity",
                    models.BooleanField(default=True, help_text="Show gold karat purity"),
                ),
                (
                    "show_tax_breakdown",
                    models.BooleanField(default=True, help_text="Show detailed tax breakdown"),
                ),
                (
                    "show_payment_terms",
                    models.BooleanField(
                        default=False, help_text="Show payment terms and conditions"
                    ),
                ),
                (
                    "custom_field_1_label",
                    models.CharField(
                        blank=True, help_text="Label for custom field 1", max_length=50
                    ),
                ),
                (
                    "custom_field_1_value",
                    models.CharField(
                        blank=True, help_text="Default value for custom field 1", max_length=255
                    ),
                ),
                (
                    "custom_field_2_label",
                    models.CharField(
                        blank=True, help_text="Label for custom field 2", max_length=50
                    ),
                ),
                (
                    "custom_field_2_value",
                    models.CharField(
                        blank=True, help_text="Default value for custom field 2", max_length=255
                    ),
                ),
                (
                    "invoice_footer_text",
                    models.TextField(blank=True, help_text="Custom footer text for invoices"),
                ),
                (
                    "receipt_footer_text",
                    models.TextField(blank=True, help_text="Custom footer text for receipts"),
                ),
                (
                    "payment_terms",
                    models.TextField(blank=True, help_text="Payment terms and conditions"),
                ),
                (
                    "return_policy",
                    models.TextField(blank=True, help_text="Return and exchange policy"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.OneToOneField(
                        help_text="Tenant that owns these invoice settings",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invoice_settings",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Invoice Settings",
                "verbose_name_plural": "Invoice Settings",
                "db_table": "invoice_settings",
            },
        ),
        migrations.CreateModel(
            name="IntegrationSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "payment_gateway_enabled",
                    models.BooleanField(
                        default=False, help_text="Enable payment gateway integration"
                    ),
                ),
                (
                    "payment_gateway_provider",
                    models.CharField(
                        blank=True,
                        help_text="Payment gateway provider (stripe, paypal, square, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "payment_gateway_api_key",
                    models.TextField(blank=True, help_text="Encrypted API key for payment gateway"),
                ),
                (
                    "payment_gateway_secret_key",
                    models.TextField(
                        blank=True, help_text="Encrypted secret key for payment gateway"
                    ),
                ),
                (
                    "payment_gateway_webhook_secret",
                    models.TextField(
                        blank=True, help_text="Encrypted webhook secret for payment gateway"
                    ),
                ),
                (
                    "payment_gateway_test_mode",
                    models.BooleanField(
                        default=True, help_text="Use test/sandbox mode for payment gateway"
                    ),
                ),
                (
                    "sms_provider_enabled",
                    models.BooleanField(default=False, help_text="Enable SMS notifications"),
                ),
                (
                    "sms_provider",
                    models.CharField(
                        blank=True,
                        help_text="SMS provider (twilio, nexmo, aws_sns, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "sms_api_key",
                    models.TextField(blank=True, help_text="Encrypted API key for SMS provider"),
                ),
                (
                    "sms_api_secret",
                    models.TextField(blank=True, help_text="Encrypted API secret for SMS provider"),
                ),
                (
                    "sms_sender_id",
                    models.CharField(
                        blank=True, help_text="SMS sender ID or phone number", max_length=20
                    ),
                ),
                (
                    "email_provider_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable custom email provider (uses Django default if disabled)",
                    ),
                ),
                (
                    "email_provider",
                    models.CharField(
                        blank=True,
                        help_text="Email provider (sendgrid, mailgun, aws_ses, smtp, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "email_api_key",
                    models.TextField(blank=True, help_text="Encrypted API key for email provider"),
                ),
                (
                    "email_from_address",
                    models.EmailField(
                        blank=True, help_text="Default 'from' email address", max_length=254
                    ),
                ),
                (
                    "email_from_name",
                    models.CharField(blank=True, help_text="Default 'from' name", max_length=100),
                ),
                (
                    "smtp_host",
                    models.CharField(blank=True, help_text="SMTP server hostname", max_length=255),
                ),
                (
                    "smtp_port",
                    models.IntegerField(
                        blank=True, help_text="SMTP server port (usually 587 or 465)", null=True
                    ),
                ),
                (
                    "smtp_username",
                    models.CharField(blank=True, help_text="SMTP username", max_length=255),
                ),
                (
                    "smtp_password",
                    models.TextField(blank=True, help_text="Encrypted SMTP password"),
                ),
                (
                    "smtp_use_tls",
                    models.BooleanField(default=True, help_text="Use TLS encryption for SMTP"),
                ),
                (
                    "gold_rate_api_enabled",
                    models.BooleanField(
                        default=False, help_text="Enable automatic gold rate updates"
                    ),
                ),
                (
                    "gold_rate_api_provider",
                    models.CharField(blank=True, help_text="Gold rate API provider", max_length=50),
                ),
                (
                    "gold_rate_api_key",
                    models.TextField(
                        blank=True, help_text="Encrypted API key for gold rate provider"
                    ),
                ),
                (
                    "gold_rate_update_frequency",
                    models.IntegerField(default=60, help_text="Update frequency in minutes"),
                ),
                (
                    "webhook_url",
                    models.URLField(blank=True, help_text="Webhook URL for external integrations"),
                ),
                (
                    "webhook_secret",
                    models.TextField(
                        blank=True, help_text="Encrypted webhook secret for HMAC verification"
                    ),
                ),
                (
                    "webhook_events",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of events to send via webhook (e.g., ['sale.created', 'inventory.updated'])",
                    ),
                ),
                (
                    "additional_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional provider-specific configuration (JSON format)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.OneToOneField(
                        help_text="Tenant that owns these integration settings",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="integration_settings",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Integration Settings",
                "verbose_name_plural": "Integration Settings",
                "db_table": "integration_settings",
            },
        ),
    ]
