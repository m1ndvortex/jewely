# Generated by Django 4.2.11 on 2025-10-22 17:26

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0008_branch_manager_branch_opening_hours"),
        ("sales", "0003_add_discount_fields"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the customer",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "customer_number",
                    models.CharField(
                        help_text="Unique customer number within tenant", max_length=50
                    ),
                ),
                ("first_name", models.CharField(help_text="Customer's first name", max_length=100)),
                ("last_name", models.CharField(help_text="Customer's last name", max_length=100)),
                (
                    "date_of_birth",
                    models.DateField(blank=True, help_text="Customer's date of birth", null=True),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MALE", "Male"),
                            ("FEMALE", "Female"),
                            ("OTHER", "Other"),
                            ("PREFER_NOT_TO_SAY", "Prefer not to say"),
                        ],
                        help_text="Customer's gender",
                        max_length=20,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, help_text="Customer's email address", max_length=254, null=True
                    ),
                ),
                (
                    "phone",
                    models.CharField(help_text="Customer's primary phone number", max_length=20),
                ),
                (
                    "alternate_phone",
                    models.CharField(
                        blank=True, help_text="Customer's alternate phone number", max_length=20
                    ),
                ),
                (
                    "address_line_1",
                    models.CharField(blank=True, help_text="Address line 1", max_length=255),
                ),
                (
                    "address_line_2",
                    models.CharField(blank=True, help_text="Address line 2", max_length=255),
                ),
                ("city", models.CharField(blank=True, help_text="City", max_length=100)),
                ("state", models.CharField(blank=True, help_text="State/Province", max_length=100)),
                (
                    "postal_code",
                    models.CharField(blank=True, help_text="Postal/ZIP code", max_length=20),
                ),
                ("country", models.CharField(blank=True, help_text="Country", max_length=100)),
                (
                    "loyalty_points",
                    models.IntegerField(
                        default=0,
                        help_text="Current loyalty points balance",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "tier_achieved_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the customer achieved their current tier",
                        null=True,
                    ),
                ),
                (
                    "tier_expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When the customer's current tier expires", null=True
                    ),
                ),
                (
                    "store_credit",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Store credit balance",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "total_purchases",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total lifetime purchase amount",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "total_points_earned",
                    models.IntegerField(
                        default=0,
                        help_text="Total loyalty points earned (lifetime)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_points_redeemed",
                    models.IntegerField(
                        default=0,
                        help_text="Total loyalty points redeemed (lifetime)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "preferred_communication",
                    models.CharField(
                        choices=[
                            ("EMAIL", "Email"),
                            ("SMS", "SMS"),
                            ("PHONE", "Phone"),
                            ("MAIL", "Mail"),
                        ],
                        default="EMAIL",
                        help_text="Preferred communication method",
                        max_length=20,
                    ),
                ),
                (
                    "marketing_opt_in",
                    models.BooleanField(
                        default=True,
                        help_text="Whether customer has opted in to marketing communications",
                    ),
                ),
                (
                    "sms_opt_in",
                    models.BooleanField(
                        default=False,
                        help_text="Whether customer has opted in to SMS communications",
                    ),
                ),
                (
                    "referral_code",
                    models.CharField(
                        blank=True,
                        help_text="Unique referral code for this customer",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "referral_reward_given",
                    models.BooleanField(
                        default=False,
                        help_text="Whether referral reward has been given to the referrer",
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Internal notes about the customer"),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags for customer segmentation (e.g., ['VIP', 'Wedding', 'Corporate'])",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether the customer account is active"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the customer was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When the customer was last updated"
                    ),
                ),
                (
                    "last_purchase_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the customer made their last purchase",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer",
                "verbose_name_plural": "Customers",
                "db_table": "crm_customers",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LoyaltyTier",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the loyalty tier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the loyalty tier (e.g., Bronze, Silver, Gold, Platinum)",
                        max_length=100,
                    ),
                ),
                (
                    "min_spending",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Minimum spending required to achieve this tier",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Discount percentage for this tier (0-100)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "points_multiplier",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.00"),
                        help_text="Points multiplier for this tier (e.g., 1.5 for 50% bonus points)",
                        max_digits=3,
                        validators=[django.core.validators.MinValueValidator(Decimal("1.00"))],
                    ),
                ),
                (
                    "validity_months",
                    models.IntegerField(
                        default=12,
                        help_text="Number of months this tier remains valid without renewal",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "benefits_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of tier benefits (exclusive access, priority service, etc.)",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0,
                        help_text="Order of this tier (0 = lowest, higher numbers = higher tiers)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this tier is currently active"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the tier was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the tier was last updated"),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this loyalty tier",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loyalty_tiers",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Loyalty Tier",
                "verbose_name_plural": "Loyalty Tiers",
                "db_table": "crm_loyalty_tiers",
                "ordering": ["order", "min_spending"],
            },
        ),
        migrations.CreateModel(
            name="GiftCard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the gift card",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "card_number",
                    models.CharField(
                        help_text="Unique gift card number", max_length=50, unique=True
                    ),
                ),
                (
                    "initial_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Initial value of the gift card",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "current_balance",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Current balance of the gift card",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("REDEEMED", "Fully Redeemed"),
                            ("EXPIRED", "Expired"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="ACTIVE",
                        help_text="Current status of the gift card",
                        max_length=20,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When the gift card expires", null=True
                    ),
                ),
                ("message", models.TextField(blank=True, help_text="Gift message")),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Internal notes about the gift card"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the gift card was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When the gift card was last updated"
                    ),
                ),
                (
                    "issued_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who issued this gift card",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "purchased_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Customer who purchased this gift card",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="gift_cards_purchased",
                        to="crm.customer",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        blank=True,
                        help_text="Customer who is the recipient of this gift card",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="gift_cards_received",
                        to="crm.customer",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this gift card",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gift_cards",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Gift Card",
                "verbose_name_plural": "Gift Cards",
                "db_table": "crm_gift_cards",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerCommunication",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the communication",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "communication_type",
                    models.CharField(
                        choices=[
                            ("EMAIL", "Email"),
                            ("SMS", "SMS"),
                            ("PHONE_CALL", "Phone Call"),
                            ("IN_PERSON", "In Person"),
                            ("NOTE", "Note"),
                        ],
                        help_text="Type of communication",
                        max_length=20,
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("INBOUND", "Inbound"), ("OUTBOUND", "Outbound")],
                        help_text="Direction of communication",
                        max_length=20,
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True,
                        help_text="Subject or title of the communication",
                        max_length=255,
                    ),
                ),
                ("content", models.TextField(help_text="Content or notes from the communication")),
                (
                    "duration_minutes",
                    models.IntegerField(
                        blank=True,
                        help_text="Duration in minutes (for calls or meetings)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the communication record was created"
                    ),
                ),
                (
                    "communication_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the actual communication took place",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who logged this communication",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="Customer this communication is with",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="communications",
                        to="crm.customer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer Communication",
                "verbose_name_plural": "Customer Communications",
                "db_table": "crm_customer_communications",
                "ordering": ["-communication_date"],
            },
        ),
        migrations.AddField(
            model_name="customer",
            name="loyalty_tier",
            field=models.ForeignKey(
                blank=True,
                help_text="Customer's current loyalty tier",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="customers",
                to="crm.loyaltytier",
            ),
        ),
        migrations.AddField(
            model_name="customer",
            name="referred_by",
            field=models.ForeignKey(
                blank=True,
                help_text="Customer who referred this customer",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="referrals",
                to="crm.customer",
            ),
        ),
        migrations.AddField(
            model_name="customer",
            name="tenant",
            field=models.ForeignKey(
                help_text="Tenant that owns this customer",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="crm_customers",
                to="core.tenant",
            ),
        ),
        migrations.CreateModel(
            name="LoyaltyTransaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the loyalty transaction",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("EARNED", "Points Earned"),
                            ("REDEEMED", "Points Redeemed"),
                            ("EXPIRED", "Points Expired"),
                            ("ADJUSTED", "Points Adjusted"),
                            ("BONUS", "Bonus Points"),
                            ("REFERRAL", "Referral Points"),
                        ],
                        help_text="Type of loyalty transaction",
                        max_length=20,
                    ),
                ),
                (
                    "points",
                    models.IntegerField(
                        help_text="Points amount (positive for earned/bonus, negative for redeemed/expired)"
                    ),
                ),
                (
                    "description",
                    models.CharField(help_text="Description of the transaction", max_length=255),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When these points expire (if applicable)", null=True
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional transaction metadata"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the transaction was created"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this transaction (for manual adjustments)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="Customer this transaction belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loyalty_transactions",
                        to="crm.customer",
                    ),
                ),
                (
                    "sale",
                    models.ForeignKey(
                        blank=True,
                        help_text="Sale that generated this transaction (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="loyalty_transactions",
                        to="sales.sale",
                    ),
                ),
            ],
            options={
                "verbose_name": "Loyalty Transaction",
                "verbose_name_plural": "Loyalty Transactions",
                "db_table": "crm_loyalty_transactions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["customer", "-created_at"], name="loyalty_cust_date_idx"),
                    models.Index(
                        fields=["customer", "transaction_type"], name="loyalty_cust_type_idx"
                    ),
                    models.Index(fields=["expires_at"], name="loyalty_expires_idx"),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="loyaltytier",
            index=models.Index(fields=["tenant", "order"], name="tier_tenant_order_idx"),
        ),
        migrations.AddIndex(
            model_name="loyaltytier",
            index=models.Index(fields=["tenant", "min_spending"], name="tier_tenant_spending_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="loyaltytier",
            unique_together={("tenant", "name")},
        ),
        migrations.AddIndex(
            model_name="giftcard",
            index=models.Index(fields=["tenant", "status"], name="gift_card_tenant_status_idx"),
        ),
        migrations.AddIndex(
            model_name="giftcard",
            index=models.Index(fields=["card_number"], name="gift_card_number_idx"),
        ),
        migrations.AddIndex(
            model_name="giftcard",
            index=models.Index(fields=["expires_at"], name="gift_card_expires_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="giftcard",
            unique_together={("tenant", "card_number")},
        ),
        migrations.AddIndex(
            model_name="customercommunication",
            index=models.Index(
                fields=["customer", "-communication_date"], name="comm_cust_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customercommunication",
            index=models.Index(
                fields=["customer", "communication_type"], name="comm_cust_type_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(fields=["tenant", "phone"], name="crm_cust_tenant_phone_idx"),
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(fields=["tenant", "email"], name="crm_cust_tenant_email_idx"),
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(fields=["tenant", "loyalty_tier"], name="crm_cust_tenant_tier_idx"),
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(
                fields=["tenant", "-total_purchases"], name="crm_cust_tenant_purch_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(
                fields=["tenant", "-last_purchase_at"], name="crm_cust_tenant_last_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(fields=["referral_code"], name="crm_cust_referral_idx"),
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(fields=["referred_by"], name="crm_cust_referred_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="customer",
            unique_together={("tenant", "customer_number")},
        ),
    ]
