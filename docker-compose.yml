version: '3.9'

services:
  db:
    image: postgres:15-alpine
    container_name: jewelry_shop_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jewelry_shop}
      # Use postgres superuser for database initialization
      POSTGRES_USER: ${DB_SUPERUSER:-postgres}
      POSTGRES_PASSWORD: ${DB_SUPERUSER_PASSWORD:-postgres}
      APP_DB_PASSWORD: ${APP_DB_PASSWORD:-app_password_change_in_production}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_wal_archive:/var/lib/postgresql/wal_archive
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/01-init-db.sh:ro
      - ./docker/init-wal-archive.sh:/docker-entrypoint-initdb.d/02-init-wal-archive.sh:ro
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: jewelry_shop_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jewelry_shop_web
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/health/')\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jewelry_shop_celery_worker
    command: celery -A config worker --loglevel=info
    volumes:
      - .:/app
      - postgres_wal_archive:/var/lib/postgresql/wal_archive
    env_file:
      - .env
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jewelry_shop_celery_beat
    command: celery -A config beat --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      web:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  prometheus:
    image: prom/prometheus:latest
    container_name: jewelry_shop_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  postgres_wal_archive:
  redis_data:
  prometheus_data:
