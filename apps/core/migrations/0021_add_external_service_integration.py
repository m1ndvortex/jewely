# Generated by Django 4.2.11 on 2025-10-28 19:03

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0020_add_webhook_models"),
    ]

    operations = [
        migrations.CreateModel(
            name="ExternalService",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the service",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Descriptive name for the service", max_length=255),
                ),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("PAYMENT_GATEWAY", "Payment Gateway"),
                            ("SMS_PROVIDER", "SMS Provider"),
                            ("EMAIL_PROVIDER", "Email Provider"),
                            ("GOLD_RATE_API", "Gold Rate API"),
                            ("SHIPPING", "Shipping Service"),
                            ("ACCOUNTING", "Accounting Integration"),
                            ("CUSTOM", "Custom Integration"),
                        ],
                        help_text="Type of external service",
                        max_length=50,
                    ),
                ),
                (
                    "provider_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the service provider (e.g., Stripe, Twilio)",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional description of the service integration"
                    ),
                ),
                (
                    "auth_type",
                    models.CharField(
                        choices=[
                            ("API_KEY", "API Key"),
                            ("OAUTH2", "OAuth2"),
                            ("BASIC", "Basic Authentication"),
                            ("BEARER_TOKEN", "Bearer Token"),
                        ],
                        default="API_KEY",
                        help_text="Authentication method used by this service",
                        max_length=50,
                    ),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True, help_text="API key or client ID (encrypted)", max_length=500
                    ),
                ),
                (
                    "api_secret",
                    models.CharField(
                        blank=True,
                        help_text="API secret or client secret (encrypted)",
                        max_length=500,
                    ),
                ),
                (
                    "base_url",
                    models.URLField(
                        blank=True, help_text="Base URL for API endpoints", max_length=500
                    ),
                ),
                (
                    "config",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional configuration parameters"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether the service integration is active"
                    ),
                ),
                (
                    "is_test_mode",
                    models.BooleanField(
                        default=False, help_text="Whether the service is in test/sandbox mode"
                    ),
                ),
                (
                    "last_health_check_at",
                    models.DateTimeField(
                        blank=True, help_text="Timestamp of last health check", null=True
                    ),
                ),
                (
                    "health_status",
                    models.CharField(
                        choices=[
                            ("HEALTHY", "Healthy"),
                            ("DEGRADED", "Degraded"),
                            ("DOWN", "Down"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        default="UNKNOWN",
                        help_text="Current health status of the service",
                        max_length=20,
                    ),
                ),
                (
                    "consecutive_failures",
                    models.IntegerField(
                        default=0, help_text="Number of consecutive health check failures"
                    ),
                ),
                (
                    "last_error_message",
                    models.TextField(
                        blank=True, help_text="Last error message from health check or API call"
                    ),
                ),
                (
                    "total_requests",
                    models.BigIntegerField(
                        default=0, help_text="Total number of API requests made"
                    ),
                ),
                (
                    "failed_requests",
                    models.BigIntegerField(
                        default=0, help_text="Total number of failed API requests"
                    ),
                ),
                (
                    "last_used_at",
                    models.DateTimeField(
                        blank=True, help_text="Timestamp of last API request", null=True
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the service was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When the service was last updated"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this service integration",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="external_services_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this service integration",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="external_services",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "External Service",
                "verbose_name_plural": "External Services",
                "db_table": "external_services",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OAuth2Token",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the token",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "access_token",
                    models.CharField(help_text="OAuth2 access token (encrypted)", max_length=1000),
                ),
                (
                    "refresh_token",
                    models.CharField(
                        blank=True, help_text="OAuth2 refresh token (encrypted)", max_length=1000
                    ),
                ),
                (
                    "token_type",
                    models.CharField(
                        default="Bearer", help_text="Token type (usually Bearer)", max_length=50
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When the access token expires", null=True
                    ),
                ),
                ("scope", models.TextField(blank=True, help_text="OAuth2 scopes granted")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the token was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When the token was last updated"
                    ),
                ),
                (
                    "service",
                    models.OneToOneField(
                        help_text="External service this token belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oauth2_token",
                        to="core.externalservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "OAuth2 Token",
                "verbose_name_plural": "OAuth2 Tokens",
                "db_table": "oauth2_tokens",
            },
        ),
        migrations.CreateModel(
            name="IntegrationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the log entry",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "method",
                    models.CharField(help_text="HTTP method (GET, POST, etc.)", max_length=10),
                ),
                ("endpoint", models.CharField(help_text="API endpoint called", max_length=500)),
                (
                    "request_headers",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Request headers (sensitive data removed)",
                    ),
                ),
                (
                    "request_body",
                    models.TextField(
                        blank=True, help_text="Request body (truncated, sensitive data removed)"
                    ),
                ),
                (
                    "response_status_code",
                    models.IntegerField(
                        blank=True, help_text="HTTP response status code", null=True
                    ),
                ),
                (
                    "response_body",
                    models.TextField(blank=True, help_text="Response body (truncated)"),
                ),
                (
                    "response_time_ms",
                    models.IntegerField(
                        blank=True, help_text="Response time in milliseconds", null=True
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        default=False, help_text="Whether the request was successful"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Error message if request failed"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the request was made"),
                ),
                (
                    "service",
                    models.ForeignKey(
                        help_text="External service this log belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="core.externalservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Integration Log",
                "verbose_name_plural": "Integration Logs",
                "db_table": "integration_logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["service", "-created_at"], name="log_service_created_idx"),
                    models.Index(fields=["success", "-created_at"], name="log_success_created_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="IntegrationHealthCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the health check",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SUCCESS", "Success"),
                            ("FAILURE", "Failure"),
                            ("TIMEOUT", "Timeout"),
                        ],
                        help_text="Result of the health check",
                        max_length=20,
                    ),
                ),
                (
                    "response_time_ms",
                    models.IntegerField(
                        blank=True, help_text="Response time in milliseconds", null=True
                    ),
                ),
                (
                    "status_code",
                    models.IntegerField(
                        blank=True, help_text="HTTP status code (if applicable)", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Error message if check failed"),
                ),
                (
                    "checked_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the health check was performed"
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        help_text="External service being checked",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_checks",
                        to="core.externalservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Integration Health Check",
                "verbose_name_plural": "Integration Health Checks",
                "db_table": "integration_health_checks",
                "ordering": ["-checked_at"],
                "indexes": [
                    models.Index(
                        fields=["service", "-checked_at"], name="health_service_checked_idx"
                    ),
                    models.Index(
                        fields=["status", "-checked_at"], name="health_status_checked_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="externalservice",
            index=models.Index(fields=["tenant", "service_type"], name="service_tenant_type_idx"),
        ),
        migrations.AddIndex(
            model_name="externalservice",
            index=models.Index(fields=["tenant", "is_active"], name="service_tenant_active_idx"),
        ),
        migrations.AddIndex(
            model_name="externalservice",
            index=models.Index(fields=["health_status"], name="service_health_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="externalservice",
            unique_together={("tenant", "name")},
        ),
    ]
