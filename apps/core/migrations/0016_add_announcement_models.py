# Generated by Django 4.2.11 on 2025-10-28 08:44

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0015_abtestvariant_tenantfeatureflag_featureflagmetric_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Announcement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the announcement",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Title of the announcement", max_length=255)),
                ("message", models.TextField(help_text="Full message content of the announcement")),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("CRITICAL", "Critical"),
                            ("MAINTENANCE", "Maintenance"),
                        ],
                        default="INFO",
                        help_text="Severity level of the announcement",
                        max_length=20,
                    ),
                ),
                (
                    "target_filter",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON filter for targeting specific tenants (by plan, region, status)",
                    ),
                ),
                (
                    "target_all_tenants",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to send to all tenants (ignores target_filter if True)",
                    ),
                ),
                (
                    "channels",
                    models.JSONField(
                        default=list,
                        help_text="List of delivery channels: ['in_app', 'email', 'sms']",
                    ),
                ),
                (
                    "scheduled_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When to send the announcement (null for immediate)",
                        null=True,
                    ),
                ),
                (
                    "sent_at",
                    models.DateTimeField(
                        blank=True, help_text="When the announcement was actually sent", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("SCHEDULED", "Scheduled"),
                            ("SENT", "Sent"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="DRAFT",
                        help_text="Current status of the announcement",
                        max_length=20,
                    ),
                ),
                (
                    "requires_acknowledgment",
                    models.BooleanField(
                        default=False,
                        help_text="Whether tenants must acknowledge this announcement",
                    ),
                ),
                (
                    "is_dismissible",
                    models.BooleanField(
                        default=True, help_text="Whether the in-app banner can be dismissed"
                    ),
                ),
                (
                    "display_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When to stop displaying the in-app banner (null for indefinite)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Administrator who created the announcement",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_announcements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "announcements",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DirectMessage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "subject",
                    models.CharField(help_text="Subject line of the message", max_length=255),
                ),
                ("message", models.TextField(help_text="Full message content")),
                (
                    "channels",
                    models.JSONField(
                        default=list,
                        help_text="List of delivery channels: ['email', 'sms', 'in_app']",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("DRAFT", "Draft"), ("SENT", "Sent"), ("FAILED", "Failed")],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "sent_at",
                    models.DateTimeField(
                        blank=True, help_text="When the message was sent", null=True
                    ),
                ),
                (
                    "email_sent",
                    models.BooleanField(
                        default=False, help_text="Whether email was sent successfully"
                    ),
                ),
                (
                    "sms_sent",
                    models.BooleanField(
                        default=False, help_text="Whether SMS was sent successfully"
                    ),
                ),
                (
                    "in_app_sent",
                    models.BooleanField(
                        default=False, help_text="Whether in-app notification was created"
                    ),
                ),
                (
                    "read_at",
                    models.DateTimeField(
                        blank=True, help_text="When the message was first read", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Administrator who sent the message",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_direct_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="The tenant receiving the message",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="direct_messages",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "direct_messages",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CommunicationTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(help_text="Name of the template", max_length=255)),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("MAINTENANCE", "Maintenance Notice"),
                            ("NEW_FEATURE", "New Feature Announcement"),
                            ("POLICY_CHANGE", "Policy Change"),
                            ("BILLING", "Billing Notice"),
                            ("SUPPORT", "Support Message"),
                            ("CUSTOM", "Custom Template"),
                        ],
                        help_text="Type of communication template",
                        max_length=50,
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text="Subject line template (supports variables)", max_length=255
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="Message template (supports variables like {{tenant_name}}, {{date}})"
                    ),
                ),
                (
                    "default_severity",
                    models.CharField(
                        choices=[
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("CRITICAL", "Critical"),
                            ("MAINTENANCE", "Maintenance"),
                        ],
                        default="INFO",
                        help_text="Default severity for announcements using this template",
                        max_length=20,
                    ),
                ),
                (
                    "default_channels",
                    models.JSONField(default=list, help_text="Default delivery channels"),
                ),
                (
                    "usage_count",
                    models.IntegerField(
                        default=0, help_text="Number of times this template has been used"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this template is available for use"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_communication_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "communication_templates",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CommunicationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "communication_type",
                    models.CharField(
                        choices=[
                            ("ANNOUNCEMENT", "Announcement"),
                            ("DIRECT_MESSAGE", "Direct Message"),
                            ("SYSTEM_NOTIFICATION", "System Notification"),
                        ],
                        help_text="Type of communication",
                        max_length=50,
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text="Subject/title of the communication", max_length=255
                    ),
                ),
                ("message_preview", models.TextField(help_text="Preview of the message content")),
                (
                    "channels_used",
                    models.JSONField(default=list, help_text="Channels used for delivery"),
                ),
                (
                    "delivery_status",
                    models.JSONField(default=dict, help_text="Status of delivery for each channel"),
                ),
                (
                    "sent_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the communication was sent"
                    ),
                ),
                (
                    "announcement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="communication_logs",
                        to="core.announcement",
                    ),
                ),
                (
                    "direct_message",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="communication_logs",
                        to="core.directmessage",
                    ),
                ),
                (
                    "sent_by",
                    models.ForeignKey(
                        help_text="Administrator who sent the communication",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_communications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant who received the communication",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="communication_logs",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "communication_logs",
                "ordering": ["-sent_at"],
            },
        ),
        migrations.CreateModel(
            name="AnnouncementRead",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "read_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the announcement was first read"
                    ),
                ),
                (
                    "acknowledged",
                    models.BooleanField(
                        default=False, help_text="Whether the announcement has been acknowledged"
                    ),
                ),
                (
                    "acknowledged_at",
                    models.DateTimeField(
                        blank=True, help_text="When the announcement was acknowledged", null=True
                    ),
                ),
                (
                    "dismissed",
                    models.BooleanField(
                        default=False, help_text="Whether the user dismissed the banner"
                    ),
                ),
                (
                    "dismissed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the banner was dismissed", null=True
                    ),
                ),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who acknowledged the announcement",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="acknowledged_announcements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "announcement",
                    models.ForeignKey(
                        help_text="The announcement that was read",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reads",
                        to="core.announcement",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="The tenant who read the announcement",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="announcement_reads",
                        to="core.tenant",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="The specific user who read the announcement",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="announcement_reads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "announcement_reads",
                "ordering": ["-read_at"],
            },
        ),
        migrations.AddIndex(
            model_name="directmessage",
            index=models.Index(
                fields=["tenant", "-created_at"], name="direct_mess_tenant__7104c7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="directmessage",
            index=models.Index(fields=["status"], name="direct_mess_status_06e406_idx"),
        ),
        migrations.AddIndex(
            model_name="directmessage",
            index=models.Index(fields=["sent_at"], name="direct_mess_sent_at_70e851_idx"),
        ),
        migrations.AddIndex(
            model_name="communicationtemplate",
            index=models.Index(
                fields=["template_type", "is_active"], name="communicati_templat_153a83_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communicationtemplate",
            index=models.Index(fields=["is_active"], name="communicati_is_acti_508b4f_idx"),
        ),
        migrations.AddIndex(
            model_name="communicationlog",
            index=models.Index(
                fields=["tenant", "-sent_at"], name="communicati_tenant__458b48_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communicationlog",
            index=models.Index(
                fields=["communication_type", "-sent_at"], name="communicati_communi_0c7da0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communicationlog",
            index=models.Index(fields=["sent_at"], name="communicati_sent_at_5fef75_idx"),
        ),
        migrations.AddIndex(
            model_name="announcementread",
            index=models.Index(
                fields=["announcement", "tenant"], name="announcemen_announc_5e3a19_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="announcementread",
            index=models.Index(
                fields=["tenant", "acknowledged"], name="announcemen_tenant__d92cae_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="announcementread",
            index=models.Index(fields=["read_at"], name="announcemen_read_at_1adf09_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="announcementread",
            unique_together={("announcement", "tenant")},
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(
                fields=["status", "-created_at"], name="announcemen_status_3a8820_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(fields=["severity"], name="announcemen_severit_7abb0b_idx"),
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(fields=["scheduled_at"], name="announcemen_schedul_ca00f4_idx"),
        ),
        migrations.AddIndex(
            model_name="announcement",
            index=models.Index(fields=["sent_at"], name="announcemen_sent_at_035745_idx"),
        ),
    ]
