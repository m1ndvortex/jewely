# Generated by Django 4.2.11 on 2025-10-25 21:15

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0012_add_subscription_models"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Backup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the backup",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "backup_type",
                    models.CharField(
                        choices=[
                            ("FULL_DATABASE", "Full Database Backup"),
                            ("TENANT_BACKUP", "Tenant-Specific Backup"),
                            ("WAL_ARCHIVE", "WAL Archive for PITR"),
                            ("CONFIGURATION", "Configuration Backup"),
                        ],
                        help_text="Type of backup operation",
                        max_length=50,
                    ),
                ),
                ("filename", models.CharField(help_text="Name of the backup file", max_length=255)),
                (
                    "size_bytes",
                    models.BigIntegerField(help_text="Size of the backup file in bytes"),
                ),
                (
                    "checksum",
                    models.CharField(
                        help_text="SHA-256 checksum for integrity verification", max_length=64
                    ),
                ),
                (
                    "local_path",
                    models.CharField(
                        blank=True,
                        help_text="Path to backup file in local storage",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "r2_path",
                    models.CharField(
                        help_text="Path to backup file in Cloudflare R2", max_length=500
                    ),
                ),
                (
                    "b2_path",
                    models.CharField(
                        help_text="Path to backup file in Backblaze B2", max_length=500
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("VERIFIED", "Verified"),
                        ],
                        default="IN_PROGRESS",
                        help_text="Current status of the backup operation",
                        max_length=20,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Timestamp when the backup was initiated"
                    ),
                ),
                (
                    "verified_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the backup integrity was verified",
                        null=True,
                    ),
                ),
                (
                    "backup_job_id",
                    models.UUIDField(
                        blank=True, help_text="Celery task ID for the backup job", null=True
                    ),
                ),
                (
                    "compression_ratio",
                    models.FloatField(
                        blank=True,
                        help_text="Compression ratio achieved (e.g., 0.3 means 70% reduction)",
                        null=True,
                    ),
                ),
                (
                    "backup_duration_seconds",
                    models.IntegerField(
                        blank=True,
                        help_text="Duration of the backup operation in seconds",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes or comments about the backup"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata (e.g., database version, table counts, etc.)",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who initiated the backup (null for automated backups)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_backups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        help_text="Tenant for tenant-specific backups (null for full database backups)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="backups",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Backup",
                "verbose_name_plural": "Backups",
                "db_table": "backups_backup",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BackupRestoreLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the restore operation",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tenant_ids",
                    models.JSONField(
                        blank=True,
                        help_text="List of tenant IDs to restore (for selective restore)",
                        null=True,
                    ),
                ),
                (
                    "restore_mode",
                    models.CharField(
                        choices=[
                            ("FULL", "Full Restore (Replace)"),
                            ("MERGE", "Merge Restore (Preserve)"),
                            ("PITR", "Point-in-Time Recovery"),
                        ],
                        help_text="Type of restore operation",
                        max_length=20,
                    ),
                ),
                (
                    "target_timestamp",
                    models.DateTimeField(
                        blank=True,
                        help_text="Target timestamp for PITR (Point-in-Time Recovery)",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="IN_PROGRESS",
                        help_text="Current status of the restore operation",
                        max_length=20,
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Timestamp when the restore was initiated"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="Timestamp when the restore completed", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if restore failed", null=True
                    ),
                ),
                (
                    "rows_restored",
                    models.BigIntegerField(
                        blank=True, help_text="Number of database rows restored", null=True
                    ),
                ),
                (
                    "duration_seconds",
                    models.IntegerField(
                        blank=True,
                        help_text="Duration of the restore operation in seconds",
                        null=True,
                    ),
                ),
                ("reason", models.TextField(help_text="Reason for the restore operation")),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the restore operation"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata (e.g., tables restored, conflicts resolved, etc.)",
                    ),
                ),
                (
                    "backup",
                    models.ForeignKey(
                        help_text="Backup that was restored",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="restore_logs",
                        to="backups.backup",
                    ),
                ),
                (
                    "initiated_by",
                    models.ForeignKey(
                        help_text="User who initiated the restore (null for automated DR)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="initiated_restores",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Backup Restore Log",
                "verbose_name_plural": "Backup Restore Logs",
                "db_table": "backups_restore_log",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="BackupAlert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the alert",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("BACKUP_FAILURE", "Backup Failure"),
                            ("SIZE_DEVIATION", "Size Deviation"),
                            ("DURATION_THRESHOLD", "Duration Threshold Exceeded"),
                            ("STORAGE_CAPACITY", "Storage Capacity Warning"),
                            ("INTEGRITY_FAILURE", "Integrity Verification Failure"),
                            ("RESTORE_FAILURE", "Restore Operation Failure"),
                        ],
                        help_text="Type of alert",
                        max_length=50,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("CRITICAL", "Critical"),
                        ],
                        help_text="Severity level of the alert",
                        max_length=20,
                    ),
                ),
                ("message", models.TextField(help_text="Alert message describing the issue")),
                (
                    "details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional details about the alert (e.g., metrics, thresholds, etc.)",
                    ),
                ),
                (
                    "notification_channels",
                    models.JSONField(
                        default=list,
                        help_text="Channels where alert was sent (email, SMS, in-app, webhook)",
                    ),
                ),
                (
                    "notification_sent_at",
                    models.DateTimeField(
                        blank=True, help_text="Timestamp when notifications were sent", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("ACKNOWLEDGED", "Acknowledged"),
                            ("RESOLVED", "Resolved"),
                        ],
                        default="ACTIVE",
                        help_text="Current status of the alert",
                        max_length=20,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Timestamp when the alert was created"
                    ),
                ),
                (
                    "acknowledged_at",
                    models.DateTimeField(
                        blank=True, help_text="Timestamp when the alert was acknowledged", null=True
                    ),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, help_text="Timestamp when the alert was resolved", null=True
                    ),
                ),
                (
                    "resolution_notes",
                    models.TextField(
                        blank=True, help_text="Notes about how the alert was resolved"
                    ),
                ),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who acknowledged the alert",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="acknowledged_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "backup",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related backup (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="backups.backup",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who resolved the alert",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "restore_log",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related restore log (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="backups.backuprestorelog",
                    ),
                ),
            ],
            options={
                "verbose_name": "Backup Alert",
                "verbose_name_plural": "Backup Alerts",
                "db_table": "backups_alert",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="backuprestorelog",
            index=models.Index(fields=["-started_at"], name="restore_started_idx"),
        ),
        migrations.AddIndex(
            model_name="backuprestorelog",
            index=models.Index(fields=["status"], name="restore_status_idx"),
        ),
        migrations.AddIndex(
            model_name="backuprestorelog",
            index=models.Index(fields=["backup", "-started_at"], name="restore_backup_started_idx"),
        ),
        migrations.AddIndex(
            model_name="backupalert",
            index=models.Index(fields=["alert_type", "-created_at"], name="alert_type_created_idx"),
        ),
        migrations.AddIndex(
            model_name="backupalert",
            index=models.Index(fields=["severity", "status"], name="alert_severity_status_idx"),
        ),
        migrations.AddIndex(
            model_name="backupalert",
            index=models.Index(fields=["status", "-created_at"], name="alert_status_created_idx"),
        ),
        migrations.AddIndex(
            model_name="backupalert",
            index=models.Index(fields=["-created_at"], name="alert_created_idx"),
        ),
        migrations.AddIndex(
            model_name="backup",
            index=models.Index(
                fields=["backup_type", "-created_at"], name="backup_type_created_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="backup",
            index=models.Index(fields=["tenant", "-created_at"], name="backup_tenant_created_idx"),
        ),
        migrations.AddIndex(
            model_name="backup",
            index=models.Index(fields=["status"], name="backup_status_idx"),
        ),
        migrations.AddIndex(
            model_name="backup",
            index=models.Index(fields=["created_at"], name="backup_created_idx"),
        ),
    ]
