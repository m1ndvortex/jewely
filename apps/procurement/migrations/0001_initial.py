# Generated by Django 4.2.11 on 2025-10-23 13:02

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import django_fsm


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0008_branch_manager_branch_opening_hours"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PurchaseOrder",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "po_number",
                    models.CharField(help_text="Unique purchase order number", max_length=50),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Subtotal before tax",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Tax amount",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total amount including tax",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "status",
                    django_fsm.FSMField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("APPROVED", "Approved"),
                            ("SENT", "Sent to Supplier"),
                            ("PARTIALLY_RECEIVED", "Partially Received"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="DRAFT",
                        help_text="Current status of the purchase order",
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        default="NORMAL",
                        help_text="Priority level of this order",
                        max_length=10,
                    ),
                ),
                (
                    "order_date",
                    models.DateField(
                        default=django.utils.timezone.now, help_text="Date when order was created"
                    ),
                ),
                (
                    "expected_delivery",
                    models.DateField(blank=True, help_text="Expected delivery date", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about this purchase order"
                    ),
                ),
                (
                    "supplier_reference",
                    models.CharField(
                        blank=True,
                        help_text="Supplier's reference number for this order",
                        max_length=100,
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="approved_purchase_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "branch",
                    models.ForeignKey(
                        blank=True,
                        help_text="Branch that will receive the goods",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.branch",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_purchase_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "procurement_purchase_orders",
                "ordering": ["-order_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Supplier",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(help_text="Supplier company name", max_length=255)),
                (
                    "contact_person",
                    models.CharField(
                        blank=True, help_text="Primary contact person name", max_length=255
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, help_text="Primary email address", max_length=254
                    ),
                ),
                (
                    "phone",
                    models.CharField(blank=True, help_text="Primary phone number", max_length=20),
                ),
                ("address", models.TextField(blank=True, help_text="Complete address")),
                (
                    "tax_id",
                    models.CharField(
                        blank=True, help_text="Tax identification number", max_length=50
                    ),
                ),
                (
                    "payment_terms",
                    models.CharField(
                        blank=True, help_text="Payment terms (e.g., Net 30, COD)", max_length=100
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        default=0,
                        help_text="Supplier rating from 0-5 stars",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether supplier is active"),
                ),
                ("notes", models.TextField(blank=True, help_text="Internal notes about supplier")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_suppliers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this supplier",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="suppliers",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "procurement_suppliers",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PurchaseOrderItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "product_name",
                    models.CharField(help_text="Name/description of the product", max_length=255),
                ),
                (
                    "product_sku",
                    models.CharField(
                        blank=True, help_text="Product SKU or supplier part number", max_length=100
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        help_text="Ordered quantity",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "received_quantity",
                    models.IntegerField(
                        default=0,
                        help_text="Quantity received so far",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price per unit",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "total_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total price for this line item",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                ("notes", models.TextField(blank=True, help_text="Notes about this item")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "purchase_order",
                    models.ForeignKey(
                        help_text="Purchase order this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="procurement.purchaseorder",
                    ),
                ),
            ],
            options={
                "db_table": "procurement_purchase_order_items",
                "ordering": ["created_at"],
            },
        ),
        migrations.AddField(
            model_name="purchaseorder",
            name="supplier",
            field=models.ForeignKey(
                help_text="Supplier for this purchase order",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="purchase_orders",
                to="procurement.supplier",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorder",
            name="tenant",
            field=models.ForeignKey(
                help_text="Tenant that owns this purchase order",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="purchase_orders",
                to="core.tenant",
            ),
        ),
        migrations.CreateModel(
            name="GoodsReceipt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "receipt_number",
                    models.CharField(help_text="Unique goods receipt number", max_length=50),
                ),
                (
                    "supplier_invoice_number",
                    models.CharField(
                        blank=True, help_text="Supplier's invoice number", max_length=100
                    ),
                ),
                (
                    "tracking_number",
                    models.CharField(
                        blank=True, help_text="Shipment tracking number", max_length=100
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("DISCREPANCY", "Has Discrepancy"),
                        ],
                        default="PENDING",
                        help_text="Current status of goods receipt",
                        max_length=20,
                    ),
                ),
                (
                    "received_date",
                    models.DateField(
                        default=django.utils.timezone.now, help_text="Date when goods were received"
                    ),
                ),
                (
                    "quality_check_passed",
                    models.BooleanField(
                        blank=True, help_text="Whether quality check passed", null=True
                    ),
                ),
                (
                    "inspection_notes",
                    models.TextField(blank=True, help_text="Notes from quality inspection"),
                ),
                (
                    "has_discrepancy",
                    models.BooleanField(
                        default=False, help_text="Whether there are discrepancies in this receipt"
                    ),
                ),
                (
                    "discrepancy_notes",
                    models.TextField(blank=True, help_text="Notes about any discrepancies"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "inspected_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who performed quality inspection",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="inspected_goods_receipts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "purchase_order",
                    models.ForeignKey(
                        help_text="Related purchase order",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="goods_receipts",
                        to="procurement.purchaseorder",
                    ),
                ),
                (
                    "received_by",
                    models.ForeignKey(
                        help_text="User who received the goods",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="received_goods_receipts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this goods receipt",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="goods_receipts",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "procurement_goods_receipts",
                "ordering": ["-received_date", "-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="supplier",
            index=models.Index(
                fields=["tenant", "is_active"], name="procurement_tenant__074076_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="supplier",
            index=models.Index(fields=["tenant", "rating"], name="procurement_tenant__6a8c8d_idx"),
        ),
        migrations.AddIndex(
            model_name="supplier",
            index=models.Index(fields=["name"], name="procurement_name_79664d_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="supplier",
            unique_together={("tenant", "name")},
        ),
        migrations.AddIndex(
            model_name="purchaseorderitem",
            index=models.Index(fields=["purchase_order"], name="procurement_purchas_1c0b6e_idx"),
        ),
        migrations.AddIndex(
            model_name="purchaseorderitem",
            index=models.Index(fields=["product_sku"], name="procurement_product_da415b_idx"),
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(fields=["tenant", "status"], name="procurement_tenant__db5195_idx"),
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(
                fields=["tenant", "supplier"], name="procurement_tenant__6a55b5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(
                fields=["tenant", "order_date"], name="procurement_tenant__ae05bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(
                fields=["status", "expected_delivery"], name="procurement_status_b69e75_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="purchaseorder",
            unique_together={("tenant", "po_number")},
        ),
        migrations.AddIndex(
            model_name="goodsreceipt",
            index=models.Index(fields=["tenant", "status"], name="procurement_tenant__26c47e_idx"),
        ),
        migrations.AddIndex(
            model_name="goodsreceipt",
            index=models.Index(
                fields=["tenant", "purchase_order"], name="procurement_tenant__8226bf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="goodsreceipt",
            index=models.Index(fields=["received_date"], name="procurement_receive_bb43e3_idx"),
        ),
        migrations.AddIndex(
            model_name="goodsreceipt",
            index=models.Index(fields=["has_discrepancy"], name="procurement_has_dis_284119_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="goodsreceipt",
            unique_together={("tenant", "receipt_number")},
        ),
    ]
