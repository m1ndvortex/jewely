# Generated by Django 4.2.11 on 2025-10-23 07:30

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import django_fsm


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0008_branch_manager_branch_opening_hours"),
        ("crm", "0003_giftcardtransaction"),
    ]

    operations = [
        migrations.CreateModel(
            name="RepairOrder",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "order_number",
                    models.CharField(help_text="Unique order number for tracking", max_length=50),
                ),
                (
                    "item_description",
                    models.TextField(help_text="Detailed description of the item to be repaired"),
                ),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("CLEANING", "Cleaning"),
                            ("POLISHING", "Polishing"),
                            ("RESIZING", "Resizing"),
                            ("STONE_SETTING", "Stone Setting"),
                            ("CHAIN_REPAIR", "Chain Repair"),
                            ("CLASP_REPAIR", "Clasp Repair"),
                            ("PRONG_REPAIR", "Prong Repair"),
                            ("ENGRAVING", "Engraving"),
                            ("RHODIUM_PLATING", "Rhodium Plating"),
                            ("CUSTOM_WORK", "Custom Work"),
                            ("OTHER", "Other"),
                        ],
                        help_text="Type of service/repair needed",
                        max_length=20,
                    ),
                ),
                (
                    "service_notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the service required"
                    ),
                ),
                (
                    "status",
                    django_fsm.FSMField(
                        choices=[
                            ("received", "Received"),
                            ("in_progress", "In Progress"),
                            ("quality_check", "Quality Check"),
                            ("completed", "Completed"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="received",
                        help_text="Current status of the repair order",
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        default="NORMAL",
                        help_text="Priority level of the repair",
                        max_length=10,
                    ),
                ),
                (
                    "received_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Date and time when the item was received",
                    ),
                ),
                ("estimated_completion", models.DateField(help_text="Estimated completion date")),
                (
                    "actual_completion",
                    models.DateTimeField(
                        blank=True, help_text="Actual completion date and time", null=True
                    ),
                ),
                (
                    "delivered_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when item was delivered to customer",
                        null=True,
                    ),
                ),
                (
                    "cost_estimate",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Estimated cost for the repair",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "final_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Final cost charged to customer",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Staff member assigned to this repair",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_repairs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_repairs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="repair_orders",
                        to="crm.customer",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="repair_orders",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "repair_orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomOrder",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "order_number",
                    models.CharField(help_text="Unique order number for tracking", max_length=50),
                ),
                (
                    "design_description",
                    models.TextField(help_text="Detailed description of the custom design"),
                ),
                (
                    "design_specifications",
                    models.JSONField(
                        default=dict,
                        help_text="Technical specifications (dimensions, materials, etc.)",
                    ),
                ),
                (
                    "complexity",
                    models.CharField(
                        choices=[
                            ("SIMPLE", "Simple"),
                            ("MODERATE", "Moderate"),
                            ("COMPLEX", "Complex"),
                            ("VERY_COMPLEX", "Very Complex"),
                        ],
                        default="MODERATE",
                        help_text="Complexity level of the custom work",
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    django_fsm.FSMField(
                        choices=[
                            ("quote_requested", "Quote Requested"),
                            ("quote_provided", "Quote Provided"),
                            ("approved", "Approved"),
                            ("in_design", "In Design"),
                            ("design_approved", "Design Approved"),
                            ("in_production", "In Production"),
                            ("quality_check", "Quality Check"),
                            ("completed", "Completed"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="quote_requested",
                        help_text="Current status of the custom order",
                        max_length=50,
                    ),
                ),
                (
                    "requested_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Date when custom order was requested",
                    ),
                ),
                (
                    "estimated_completion",
                    models.DateField(blank=True, help_text="Estimated completion date", null=True),
                ),
                (
                    "actual_completion",
                    models.DateTimeField(
                        blank=True, help_text="Actual completion date and time", null=True
                    ),
                ),
                (
                    "delivered_date",
                    models.DateTimeField(
                        blank=True, help_text="Date when item was delivered to customer", null=True
                    ),
                ),
                (
                    "quoted_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Quoted price for the custom work",
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "final_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Final price charged to customer",
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "deposit_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Deposit amount paid by customer",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "craftsman",
                    models.ForeignKey(
                        blank=True,
                        help_text="Craftsman assigned to create the piece",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="crafted_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_custom_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="custom_orders",
                        to="crm.customer",
                    ),
                ),
                (
                    "designer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Designer assigned to this custom order",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="designed_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_orders",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "custom_orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RepairOrderPhoto",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        help_text="Photo of the repair item", upload_to="repair_photos/%Y/%m/%d/"
                    ),
                ),
                (
                    "photo_type",
                    models.CharField(
                        choices=[
                            ("BEFORE", "Before Repair"),
                            ("DURING", "During Repair"),
                            ("AFTER", "After Repair"),
                            ("DAMAGE", "Damage Documentation"),
                            ("REFERENCE", "Reference Photo"),
                        ],
                        help_text="Type/purpose of the photo",
                        max_length=10,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description or notes about the photo"),
                ),
                (
                    "taken_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text="When the photo was taken"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "repair_order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="photos",
                        to="repair.repairorder",
                    ),
                ),
                (
                    "taken_by",
                    models.ForeignKey(
                        help_text="Staff member who took the photo",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "repair_order_photos",
                "ordering": ["taken_at"],
                "indexes": [
                    models.Index(
                        fields=["repair_order", "photo_type"], name="repair_orde_repair__ed800a_idx"
                    ),
                    models.Index(
                        fields=["repair_order", "taken_at"], name="repair_orde_repair__15809d_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="repairorder",
            index=models.Index(fields=["tenant", "status"], name="repair_orde_tenant__b3c864_idx"),
        ),
        migrations.AddIndex(
            model_name="repairorder",
            index=models.Index(
                fields=["tenant", "customer"], name="repair_orde_tenant__fc6337_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="repairorder",
            index=models.Index(
                fields=["tenant", "estimated_completion"], name="repair_orde_tenant__680650_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="repairorder",
            index=models.Index(
                fields=["tenant", "priority", "status"], name="repair_orde_tenant__1b61f6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="repairorder",
            index=models.Index(
                fields=["assigned_to", "status"], name="repair_orde_assigne_fcd171_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="repairorder",
            unique_together={("tenant", "order_number")},
        ),
        migrations.AddIndex(
            model_name="customorder",
            index=models.Index(fields=["tenant", "status"], name="custom_orde_tenant__4393af_idx"),
        ),
        migrations.AddIndex(
            model_name="customorder",
            index=models.Index(
                fields=["tenant", "customer"], name="custom_orde_tenant__a761e7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customorder",
            index=models.Index(
                fields=["tenant", "estimated_completion"], name="custom_orde_tenant__9712f2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customorder",
            index=models.Index(
                fields=["designer", "status"], name="custom_orde_designe_5e3c97_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customorder",
            index=models.Index(
                fields=["craftsman", "status"], name="custom_orde_craftsm_c74b8e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="customorder",
            unique_together={("tenant", "order_number")},
        ),
    ]
