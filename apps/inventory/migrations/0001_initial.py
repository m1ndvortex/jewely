# Generated by Django 4.2.11 on 2025-10-21 23:17

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0004_permissionauditlog"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProductCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the category",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Category name (e.g., Rings, Necklaces, Bracelets)",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Optional description of the category"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether this category is active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent category for hierarchical organization",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="inventory.productcategory",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this category",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_categories",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Category",
                "verbose_name_plural": "Product Categories",
                "db_table": "inventory_categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="InventoryItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the inventory item",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "sku",
                    models.CharField(
                        help_text="Stock Keeping Unit - unique identifier within tenant",
                        max_length=100,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Product name (e.g., '24K Gold Ring with Diamond')",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Detailed description of the item"),
                ),
                (
                    "karat",
                    models.IntegerField(
                        help_text="Gold karat (e.g., 18, 22, 24)",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "weight_grams",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Weight in grams",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.001"))],
                    ),
                ),
                (
                    "craftsmanship_level",
                    models.CharField(
                        choices=[
                            ("HANDMADE", "Handmade"),
                            ("MACHINE_MADE", "Machine Made"),
                            ("SEMI_HANDMADE", "Semi-Handmade"),
                        ],
                        default="MACHINE_MADE",
                        help_text="Level of craftsmanship",
                        max_length=20,
                    ),
                ),
                (
                    "cost_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Cost price (what we paid)",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "selling_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Selling price (what we charge)",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "markup_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Markup percentage over cost price",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        default=0,
                        help_text="Current quantity in stock",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "min_quantity",
                    models.IntegerField(
                        default=0,
                        help_text="Minimum quantity threshold for low stock alerts",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "serial_number",
                    models.CharField(
                        blank=True,
                        help_text="Unique serial number for high-value items (serialized tracking)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "lot_number",
                    models.CharField(
                        blank=True,
                        help_text="Lot number for bulk items like gemstones (lot tracking)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True,
                        help_text="Barcode for quick scanning",
                        max_length=100,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "qr_code",
                    models.CharField(
                        blank=True, help_text="QR code data", max_length=255, null=True
                    ),
                ),
                (
                    "supplier_name",
                    models.CharField(blank=True, help_text="Supplier name", max_length=255),
                ),
                (
                    "supplier_sku",
                    models.CharField(
                        blank=True, help_text="Supplier's SKU/reference number", max_length=100
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Additional notes about the item"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active in inventory"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the item was added to inventory"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the item was last updated"),
                ),
                (
                    "branch",
                    models.ForeignKey(
                        help_text="Branch where this item is located",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="inventory_items",
                        to="core.branch",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Product category",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="items",
                        to="inventory.productcategory",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this inventory item",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inventory_items",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory Item",
                "verbose_name_plural": "Inventory Items",
                "db_table": "inventory_items",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="productcategory",
            index=models.Index(fields=["tenant", "is_active"], name="cat_tenant_active_idx"),
        ),
        migrations.AddIndex(
            model_name="productcategory",
            index=models.Index(fields=["tenant", "parent"], name="cat_tenant_parent_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="productcategory",
            unique_together={("tenant", "name", "parent")},
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(fields=["tenant", "branch"], name="inv_tenant_branch_idx"),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(fields=["tenant", "category"], name="inv_tenant_category_idx"),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(fields=["tenant", "is_active"], name="inv_tenant_active_idx"),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(fields=["tenant", "karat"], name="inv_tenant_karat_idx"),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(fields=["sku"], name="inv_sku_idx"),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(fields=["barcode"], name="inv_barcode_idx"),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(fields=["serial_number"], name="inv_serial_idx"),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(fields=["lot_number"], name="inv_lot_idx"),
        ),
        migrations.AddIndex(
            model_name="inventoryitem",
            index=models.Index(
                fields=["tenant", "quantity", "min_quantity"], name="inv_low_stock_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="inventoryitem",
            unique_together={("tenant", "sku")},
        ),
    ]
