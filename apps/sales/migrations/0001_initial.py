# Generated by Django 4.2.11 on 2025-10-22 14:33

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("inventory", "0002_enable_rls"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0007_ensure_tenants_rls_enabled"),
    ]

    operations = [
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the customer",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "customer_number",
                    models.CharField(
                        help_text="Unique customer number within tenant", max_length=50
                    ),
                ),
                ("first_name", models.CharField(help_text="Customer's first name", max_length=100)),
                ("last_name", models.CharField(help_text="Customer's last name", max_length=100)),
                (
                    "email",
                    models.EmailField(
                        blank=True, help_text="Customer's email address", max_length=254, null=True
                    ),
                ),
                ("phone", models.CharField(help_text="Customer's phone number", max_length=20)),
                (
                    "loyalty_tier",
                    models.CharField(
                        choices=[
                            ("BRONZE", "Bronze"),
                            ("SILVER", "Silver"),
                            ("GOLD", "Gold"),
                            ("PLATINUM", "Platinum"),
                        ],
                        default="BRONZE",
                        help_text="Customer's loyalty tier",
                        max_length=20,
                    ),
                ),
                (
                    "loyalty_points",
                    models.IntegerField(
                        default=0,
                        help_text="Current loyalty points balance",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "store_credit",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Store credit balance",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "total_purchases",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total lifetime purchase amount",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the customer was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When the customer was last updated"
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this customer",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customers",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer",
                "verbose_name_plural": "Customers",
                "db_table": "sales_customers",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Sale",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the sale",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "sale_number",
                    models.CharField(
                        help_text="Unique sale number within tenant (e.g., 'SALE-2024-00001')",
                        max_length=50,
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Subtotal before tax and discount",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "tax",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Tax amount",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "discount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Discount amount",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "total",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total amount (subtotal + tax - discount)",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("CASH", "Cash"),
                            ("CARD", "Card"),
                            ("STORE_CREDIT", "Store Credit"),
                            ("SPLIT", "Split Payment"),
                            ("OTHER", "Other"),
                        ],
                        help_text="Primary payment method used",
                        max_length=50,
                    ),
                ),
                (
                    "payment_details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional payment details (split payment breakdown, card last 4 digits, etc.)",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("COMPLETED", "Completed"),
                            ("REFUNDED", "Refunded"),
                            ("CANCELLED", "Cancelled"),
                            ("ON_HOLD", "On Hold"),
                        ],
                        default="COMPLETED",
                        help_text="Current status of the sale",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Additional notes about the sale"),
                ),
                (
                    "is_synced",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this sale has been synced from offline mode",
                    ),
                ),
                (
                    "offline_created_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Original creation timestamp if created offline",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, help_text="When the sale was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the sale was last updated"),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the sale was completed", null=True
                    ),
                ),
                (
                    "branch",
                    models.ForeignKey(
                        help_text="Branch where the sale was made",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sales",
                        to="core.branch",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Customer who made the purchase (optional for walk-in sales)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sales",
                        to="sales.customer",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        help_text="Employee who processed the sale",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sales_processed",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant that owns this sale",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sales",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sale",
                "verbose_name_plural": "Sales",
                "db_table": "sales",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Terminal",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the terminal",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "terminal_id",
                    models.CharField(
                        help_text="Human-readable terminal identifier (e.g., 'POS-01', 'MAIN-COUNTER')",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the terminal location or purpose",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this terminal is currently active and can process sales",
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Terminal-specific configuration (printer settings, scanner config, etc.)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the terminal was registered"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When the terminal was last updated"
                    ),
                ),
                (
                    "last_used_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the terminal was last used for a sale",
                        null=True,
                    ),
                ),
                (
                    "branch",
                    models.ForeignKey(
                        help_text="Branch where this terminal is located",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="terminals",
                        to="core.branch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Terminal",
                "verbose_name_plural": "Terminals",
                "db_table": "sales_terminals",
                "ordering": ["branch", "terminal_id"],
            },
        ),
        migrations.CreateModel(
            name="SaleItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the sale item",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        help_text="Quantity sold",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Unit price at time of sale (may differ from current inventory price)",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Subtotal for this line item (quantity * unit_price)",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "discount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Discount applied to this specific item",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Additional notes about this sale item"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the sale item was added"
                    ),
                ),
                (
                    "inventory_item",
                    models.ForeignKey(
                        help_text="Inventory item that was sold",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sale_items",
                        to="inventory.inventoryitem",
                    ),
                ),
                (
                    "sale",
                    models.ForeignKey(
                        help_text="Sale that this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="sales.sale",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sale Item",
                "verbose_name_plural": "Sale Items",
                "db_table": "sale_items",
                "ordering": ["created_at"],
            },
        ),
        migrations.AddField(
            model_name="sale",
            name="terminal",
            field=models.ForeignKey(
                help_text="Terminal used to process the sale",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="sales",
                to="sales.terminal",
            ),
        ),
        migrations.AddIndex(
            model_name="terminal",
            index=models.Index(fields=["branch", "is_active"], name="term_branch_active_idx"),
        ),
        migrations.AddIndex(
            model_name="terminal",
            index=models.Index(fields=["terminal_id"], name="term_id_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="terminal",
            unique_together={("branch", "terminal_id")},
        ),
        migrations.AddIndex(
            model_name="saleitem",
            index=models.Index(fields=["sale"], name="saleitem_sale_idx"),
        ),
        migrations.AddIndex(
            model_name="saleitem",
            index=models.Index(fields=["inventory_item"], name="saleitem_inv_idx"),
        ),
        migrations.AddIndex(
            model_name="sale",
            index=models.Index(fields=["tenant", "-created_at"], name="sale_tenant_date_idx"),
        ),
        migrations.AddIndex(
            model_name="sale",
            index=models.Index(fields=["tenant", "status"], name="sale_tenant_status_idx"),
        ),
        migrations.AddIndex(
            model_name="sale",
            index=models.Index(
                fields=["tenant", "branch", "-created_at"], name="sale_branch_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sale",
            index=models.Index(
                fields=["tenant", "employee", "-created_at"], name="sale_emp_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sale",
            index=models.Index(
                fields=["tenant", "terminal", "-created_at"], name="sale_term_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sale",
            index=models.Index(fields=["customer", "-created_at"], name="sale_cust_date_idx"),
        ),
        migrations.AddIndex(
            model_name="sale",
            index=models.Index(fields=["tenant", "payment_method"], name="sale_payment_idx"),
        ),
        migrations.AddIndex(
            model_name="sale",
            index=models.Index(fields=["is_synced"], name="sale_synced_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="sale",
            unique_together={("tenant", "sale_number")},
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(fields=["tenant", "phone"], name="cust_tenant_phone_idx"),
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(fields=["tenant", "email"], name="cust_tenant_email_idx"),
        ),
        migrations.AddIndex(
            model_name="customer",
            index=models.Index(fields=["tenant", "loyalty_tier"], name="cust_tenant_tier_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="customer",
            unique_together={("tenant", "customer_number")},
        ),
    ]
