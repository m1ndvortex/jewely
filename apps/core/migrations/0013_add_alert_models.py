# Generated by Django 4.2.11 on 2025-10-27 07:14

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0012_add_subscription_models"),
    ]

    operations = [
        migrations.CreateModel(
            name="AlertRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the alert rule",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(help_text="Name of the alert rule", max_length=255)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of what this alert monitors"
                    ),
                ),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("CPU_USAGE", "CPU Usage"),
                            ("MEMORY_USAGE", "Memory Usage"),
                            ("DISK_USAGE", "Disk Usage"),
                            ("DATABASE_CONNECTIONS", "Database Connections"),
                            ("REDIS_MEMORY", "Redis Memory"),
                            ("CELERY_QUEUE_LENGTH", "Celery Queue Length"),
                            ("SERVICE_DOWN", "Service Down"),
                            ("SLOW_QUERY", "Slow Query"),
                            ("ERROR_RATE", "Error Rate"),
                            ("CUSTOM", "Custom Metric"),
                        ],
                        help_text="Type of metric to monitor",
                        max_length=50,
                    ),
                ),
                (
                    "operator",
                    models.CharField(
                        choices=[
                            ("GT", "Greater Than"),
                            ("LT", "Less Than"),
                            ("EQ", "Equals"),
                            ("NE", "Not Equals"),
                        ],
                        default="GT",
                        help_text="Comparison operator",
                        max_length=10,
                    ),
                ),
                ("threshold", models.FloatField(help_text="Threshold value to trigger alert")),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="WARNING",
                        help_text="Severity level of the alert",
                        max_length=20,
                    ),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=True, help_text="Whether this alert rule is active"
                    ),
                ),
                (
                    "check_interval_minutes",
                    models.IntegerField(
                        default=5, help_text="How often to check this metric (in minutes)"
                    ),
                ),
                (
                    "cooldown_minutes",
                    models.IntegerField(
                        default=30,
                        help_text="Minimum time between alerts for the same rule (in minutes)",
                    ),
                ),
                ("send_email", models.BooleanField(default=True, help_text="Send alert via email")),
                ("send_sms", models.BooleanField(default=False, help_text="Send alert via SMS")),
                ("send_slack", models.BooleanField(default=False, help_text="Send alert to Slack")),
                (
                    "email_recipients",
                    models.TextField(
                        blank=True, help_text="Comma-separated list of email addresses"
                    ),
                ),
                (
                    "sms_recipients",
                    models.TextField(blank=True, help_text="Comma-separated list of phone numbers"),
                ),
                (
                    "slack_channel",
                    models.CharField(
                        blank=True,
                        help_text="Slack channel to send alerts to (e.g., #alerts)",
                        max_length=255,
                    ),
                ),
                (
                    "escalate_after_minutes",
                    models.IntegerField(
                        blank=True,
                        help_text="Escalate if not acknowledged within this time (minutes)",
                        null=True,
                    ),
                ),
                (
                    "escalation_email_recipients",
                    models.TextField(
                        blank=True, help_text="Comma-separated list of escalation email addresses"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_alert_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_alert_rules",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MonitoringAlert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the alert",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("ACKNOWLEDGED", "Acknowledged"),
                            ("RESOLVED", "Resolved"),
                            ("ESCALATED", "Escalated"),
                        ],
                        default="ACTIVE",
                        help_text="Current status of the alert",
                        max_length=20,
                    ),
                ),
                ("message", models.TextField(help_text="Alert message")),
                (
                    "current_value",
                    models.FloatField(
                        help_text="Current value of the metric that triggered the alert"
                    ),
                ),
                (
                    "threshold_value",
                    models.FloatField(help_text="Threshold value that was exceeded"),
                ),
                (
                    "email_sent",
                    models.BooleanField(
                        default=False, help_text="Whether email notification was sent"
                    ),
                ),
                (
                    "sms_sent",
                    models.BooleanField(
                        default=False, help_text="Whether SMS notification was sent"
                    ),
                ),
                (
                    "slack_sent",
                    models.BooleanField(
                        default=False, help_text="Whether Slack notification was sent"
                    ),
                ),
                (
                    "email_sent_at",
                    models.DateTimeField(blank=True, help_text="When email was sent", null=True),
                ),
                (
                    "sms_sent_at",
                    models.DateTimeField(blank=True, help_text="When SMS was sent", null=True),
                ),
                (
                    "slack_sent_at",
                    models.DateTimeField(
                        blank=True, help_text="When Slack message was sent", null=True
                    ),
                ),
                (
                    "acknowledged_at",
                    models.DateTimeField(
                        blank=True, help_text="When the alert was acknowledged", null=True
                    ),
                ),
                (
                    "acknowledgment_notes",
                    models.TextField(
                        blank=True, help_text="Notes added when acknowledging the alert"
                    ),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, help_text="When the alert was resolved", null=True
                    ),
                ),
                (
                    "resolution_notes",
                    models.TextField(blank=True, help_text="Notes added when resolving the alert"),
                ),
                (
                    "escalated_at",
                    models.DateTimeField(
                        blank=True, help_text="When the alert was escalated", null=True
                    ),
                ),
                (
                    "escalation_sent",
                    models.BooleanField(
                        default=False, help_text="Whether escalation notification was sent"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who acknowledged the alert",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="acknowledged_monitoring_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "alert_rule",
                    models.ForeignKey(
                        help_text="Alert rule that triggered this alert",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="core.alertrule",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who resolved the alert",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_monitoring_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_alerts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AlertDeliveryLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "channel",
                    models.CharField(
                        choices=[("EMAIL", "Email"), ("SMS", "SMS"), ("SLACK", "Slack")],
                        max_length=20,
                    ),
                ),
                (
                    "recipient",
                    models.CharField(
                        help_text="Email address, phone number, or Slack channel", max_length=255
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("SENT", "Sent"), ("FAILED", "Failed")],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Error message if delivery failed"),
                ),
                (
                    "retry_count",
                    models.IntegerField(default=0, help_text="Number of delivery attempts"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "alert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_logs",
                        to="core.monitoringalert",
                    ),
                ),
            ],
            options={
                "db_table": "monitoring_alert_delivery_logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="monitoringalert",
            index=models.Index(
                fields=["alert_rule", "status"], name="monitoring__alert_r_ed5fd7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="monitoringalert",
            index=models.Index(
                fields=["status", "-created_at"], name="monitoring__status_0f47ca_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="monitoringalert",
            index=models.Index(fields=["created_at"], name="monitoring__created_69a658_idx"),
        ),
        migrations.AddIndex(
            model_name="alertrule",
            index=models.Index(
                fields=["metric_type", "is_enabled"], name="monitoring__metric__d1e5c0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alertrule",
            index=models.Index(fields=["severity"], name="monitoring__severit_c09b2b_idx"),
        ),
        migrations.AddIndex(
            model_name="alertdeliverylog",
            index=models.Index(fields=["alert", "channel"], name="monitoring__alert_i_a4d5b3_idx"),
        ),
        migrations.AddIndex(
            model_name="alertdeliverylog",
            index=models.Index(fields=["status"], name="monitoring__status_f87e37_idx"),
        ),
    ]
